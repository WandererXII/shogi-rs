var N=null,E="",T="t",U="u",searchIndex={};
var R=["option","either","Apply the function `f` on the value in the `Left` variant…","Apply the function `f` on the value in the `Right` variant…","Factor out a homogeneous type from an either of pairs.","into_iter","result","formatter","ordering","as_ref","Unsigned multiply without affecting flags.","Extract lowest set isolated bit.","Get mask up to lowest set bit.","Isolate lowest clear bit","Sets the least significant bit of `self` and clears all…","The enum `Either` with variants `Left` and `Right` is a…","A value of type `L`.","A value of type `R`.","interleave","multipeek","Create an iterator that merges elements of the contained…","enumerate","Iterate `i` and `j` in lock step.","An iterator adaptor that iterates over the cartesian…","Format all iterator elements lazily, separated by `sep`.","An iterator adapter to filter out duplicate elements.","An iterator which iterates two other iterators…","An iterator adaptor that merges the two base iterators in…","An iterator adaptor that merges an abitrary number of base…","put_back","itertools","is_right","as_mut","eitherorboth","map_left","map_right","left_and_then","Apply the function `f` on the value `b` in `Right(b)` or…","right_and_then","Apply the function `f` on the value `a` in `Left(a)` or…","itertools::structs","into_inner","An iterator adaptor to insert a particular value between…","intersperse","Create an iterator which iterates over both this and the…","A “meta iterator adaptor”. Its closure receives a…","batching","Return an iterator adaptor that merges the two base…","merge_join_by","mergejoinby","kmerge_by","Return an iterator adaptor that flattens an iterator of…","kmergeby","Return an iterator adaptor that iterates over the…","coalesce","Remove duplicates from sections of consecutive identical…","Return an iterator adaptor that filters out elements that…","combinations","permutations","positions","Combine all an iterator's elements into one element by…","Format all iterator elements, separated by `sep`.","Sort all iterator elements into a new iterator in…","intoiter","minmaxresult","Return the minimum and maximum element of an iterator, as…","exactlyoneerror","try_from","try_into","borrow_mut","type_id","to_owned","clone_into","borrow","typeid","to_string","string","partial_cmp","next_back","size_hint","deref_mut","peeking_next","collect","multiproduct","interleaveshortest","whilesome","combinationswithreplacement","padusing","putbackn","iterate","uniqueby","ziplongest","foldwhile","position","is_left","Return true if the value is the `Left` variant.","Return true if the value is the `Right` variant.","Convert the left side of `Either<L, R>` to an `Option<L>`.","Convert the right side of `Either<L, R>` to an `Option<R>`.","Convert `&Either<L, R>` to `Either<&L, &R>`.","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.","Convert `Either<L, R>` to `Either<R, L>`.","Apply one of two functions depending on contents, unifying…","either_with","Like `either`, but provide some context to whichever of…","Convert the inner value to an iterator.","Return left value or given value","left_or_default","Return left or a default","left_or_else","Returns left value or computes it from a closure","Return right value or given value","right_or_default","Return right or a default","right_or_else","Returns right value or computes it from a closure","factor_first","factor_second","Extract the value of an either over two equivalent types.","Map `f` over the contained value and return the result in…","MinMaxResult","EitherOrBoth","FoldWhile","MultiPeek","PeekingNext","Itertools","Interleave","InterleaveShortest","MapResults","TakeWhileRef","WhileSome","TupleCombinations","Positions","MultiProduct","Combinations","CombinationsWithReplacement","ConsTuples","ExactlyOneError","FormatWith","IntoChunks","Intersperse","MergeJoinBy","PeekingTakeWhile","Permutations","ProcessResults","RepeatCall","TupleBuffer","TupleWindows","WithPosition","ZipLongest","bitboard","shogi::moves","shogi::moves::Move","piece_type","from_sfen","piecetype","unpromote","Converts the instance into the unique number for array…","Position","shogi::position","shogi::position::MoveRecord","moveerror","sfenerror","shogi::square","Returns an iterator of all variants.","shogi::time","black_time","shogi::time::TimeControl","white_time","duration","shogi::bitboard","shogi::color","shogi::error","shogi::hand","shogi::piece","shogi::piece_type","bitand_assign","bitor_assign","bitxor_assign","description","MoveError","PieceType","MoveRecord","TimeControl","ColorIter","SfenError","PieceTypeIter","SquareIter"];
searchIndex["bitintr"]={"doc":"`bitintr` offers portable bit manipulation intrinsics…","i":[[8,"Rev","bitintr","Byte reverse",N,N],[10,"rev",E,"Reverse the order of the bytes.",0,[[],["self"]]],[8,"Rbit",E,"Bit reverse",N,N],[10,"rbit",E,"Reverse the bit order.",1,[[],["self"]]],[8,"Lzcnt",E,"Count leading zeros",N,N],[10,"clz",E,"Count Leading Zeros.",2,[[],["self"]]],[10,"lzcnt",E,"Counts the leading most significant zero bits.",2,[[],["self"]]],[8,"Popcnt",E,"Count bits set.",N,N],[10,"popcnt",E,"Counts the bits that are set.",3,[[],["self"]]],[8,"Cls",E,"Count leading sign bits",N,N],[10,"cls",E,"Counts the leading most significant bits set.",4,[[],["self"]]],[8,"Pdep",E,"Parallel bits deposit",N,N],[10,"pdep",E,"Parallel bits deposit.",5,[[],["self"]]],[8,"Pext",E,"Parallel bits extract",N,N],[10,"pext",E,"Parallel bits extract.",6,[[],["self"]]],[8,"Bzhi",E,"Zero high bits",N,N],[10,"bzhi",E,"Zero the high bits of `self` at position >= `bit_position`.",7,[[["u32"]],["self"]]],[8,"Mulx",E,R[10],N,N],[10,"mulx",E,R[10],8,[[]]],[8,"Andn",E,"Logical and not",N,N],[10,"andn",E,"Bitwise logical `AND` of inverted `self` with `y`.",9,[[],["self"]]],[8,"Bextr",E,"Bit field extract",N,N],[10,"bextr",E,"Bit field extract.",10,[[],["self"]]],[10,"bextri",E,"Bit Field Extract (with immediate operand).",10,[[["u32"]],["self"]]],[8,"Blsi",E,R[11],N,N],[10,"blsi",E,R[11],11,[[],["self"]]],[8,"Blsic",E,"Isolate lowest set bit and complement",N,N],[10,"blsic",E,"Clears least significant bit and sets all other bits.",12,[[],["self"]]],[8,"Blsmsk",E,R[12],N,N],[10,"blsmsk",E,R[12],13,[[],["self"]]],[8,"Blsr",E,"Resets lowest set bit.",N,N],[10,"blsr",E,"Resets the lowest set bit of `self`.",14,[[],["self"]]],[8,"Tzcnt",E,"Counts trailing zero bits",N,N],[10,"tzcnt",E,"Counts the number of trailing least significant zero bits.",15,[[],["self"]]],[8,"Blcfill",E,"Fill from lowest clear bit",N,N],[10,"blcfill",E,"Clears all bits below the least significant zero bit of…",16,[[],["self"]]],[8,"Blci",E,R[13],N,N],[10,"blci",E,"Sets all bits of `self` to 1 except for the least…",17,[[],["self"]]],[8,"Blcic",E,R[13],N,N],[10,"blcic",E,R[14],18,[[],["self"]]],[8,"Blcmsk",E,"Mask from lowest clear bit.",N,N],[10,"blcmsk",E,R[14],19,[[],["self"]]],[8,"Blcs",E,"Set lowest clear bit",N,N],[10,"blcs",E,"Sets the least significant bit of `self`.",20,[[],["self"]]],[8,"Blsfill",E,"Fill from lowest set bit",N,N],[10,"blsfill",E,"Sets all bits of `self` below the least significant one.",21,[[],["self"]]],[8,"T1mskc",E,"Inverse mask from trailing ones",N,N],[10,"t1mskc",E,"Clears all bits below the least significant zero of `self`…",22,[[],["self"]]],[8,"Tzmsk",E,"Mask from trailing zeros",N,N],[10,"tzmsk",E,"Sets all bits below the least significant one of `self`…",23,[[],["self"]]]],"p":[[8,"Rev"],[8,"Rbit"],[8,"Lzcnt"],[8,"Popcnt"],[8,"Cls"],[8,"Pdep"],[8,"Pext"],[8,"Bzhi"],[8,"Mulx"],[8,"Andn"],[8,"Bextr"],[8,"Blsi"],[8,"Blsic"],[8,"Blsmsk"],[8,"Blsr"],[8,"Tzcnt"],[8,"Blcfill"],[8,"Blci"],[8,"Blcic"],[8,"Blcmsk"],[8,"Blcs"],[8,"Blsfill"],[8,"T1mskc"],[8,"Tzmsk"]]};
searchIndex["either"]={"doc":"The enum [`Either`] with variants `Left` and `Right` is a…","i":[[4,"Either",R[1],R[15],N,N],[13,"Left",E,R[16],0,N],[13,"Right",E,R[17],0,N],[11,R[94],E,R[95],0,[[["self"]],["bool"]]],[11,R[31],E,R[96],0,[[["self"]],["bool"]]],[11,"left",E,R[97],0,[[],[R[0]]]],[11,"right",E,R[98],0,[[],[R[0]]]],[11,R[9],E,R[99],0,[[["self"]],[["l"],["r"],[R[1]]]]],[11,R[32],E,R[100],0,[[["self"]],[[R[1]],["l"],["r"]]]],[11,"flip",E,R[101],0,[[],[R[1]]]],[11,R[34],E,R[2],0,[[["f"]],[R[1]]]],[11,R[35],E,R[3],0,[[["f"]],[R[1]]]],[11,R[1],E,R[102],0,[[["f"],["g"]],[T]]],[11,R[103],E,R[104],0,[[["ctx"],["f"],["g"]],[T]]],[11,R[36],E,R[2],0,[[["f"]],[R[1]]]],[11,R[38],E,R[3],0,[[["f"]],[R[1]]]],[11,R[5],E,R[105],0,[[],[R[1]]]],[11,"left_or",E,R[106],0,[[["l"]],["l"]]],[11,R[107],E,R[108],0,[[],["l"]]],[11,R[109],E,R[110],0,[[["f"]],["l"]]],[11,"right_or",E,R[111],0,[[["r"]],["r"]]],[11,R[112],E,R[113],0,[[],["r"]]],[11,R[114],E,R[115],0,[[["f"]],["r"]]],[11,R[116],E,R[4],0,[[]]],[11,R[117],E,R[4],0,[[]]],[11,R[41],E,R[118],0,[[],[T]]],[11,"map",E,R[119],0,[[["f"]],[R[1]]]],[14,"try_left",E,"Macro for unwrapping the left side of an `Either`, which…",N,N],[14,"try_right",E,"Dual to `try_left!`, see its documentation for more…",N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,R[67],E,E,0,[[[U]],[R[6]]]],[11,R[5],E,E,0,[[],["i"]]],[11,"into",E,E,0,[[],[U]]],[11,R[68],E,E,0,[[],[R[6]]]],[11,R[73],E,E,0,[[["self"]],[T]]],[11,R[69],E,E,0,[[["self"]],[T]]],[11,R[70],E,E,0,[[["self"]],[R[74]]]],[11,"from",E,E,0,[[[R[6]]],["self"]]],[11,"fmt",E,E,0,[[[R[7]],["self"]],[R[6]]]],[11,"fmt",E,E,0,[[["self"],[R[7]]],[R[6]]]],[11,"eq",E,E,0,[[[R[1]],["self"]],["bool"]]],[11,"ne",E,E,0,[[[R[1]],["self"]],["bool"]]],[11,"cmp",E,E,0,[[[R[1]],["self"]],[R[8]]]],[11,R[77],E,E,0,[[[R[1]],["self"]],[[R[0],[R[8]]],[R[8]]]]],[11,"lt",E,E,0,[[[R[1]],["self"]],["bool"]]],[11,"le",E,E,0,[[[R[1]],["self"]],["bool"]]],[11,"gt",E,E,0,[[[R[1]],["self"]],["bool"]]],[11,"ge",E,E,0,[[[R[1]],["self"]],["bool"]]],[11,"deref",E,E,0,[[["self"]]]],[11,R[80],E,E,0,[[["self"]]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"next",E,E,0,[[["self"]],[R[0]]]],[11,R[79],E,E,0,[[["self"]]]],[11,"fold",E,E,0,[[["acc"],["g"]],["acc"]]],[11,"count",E,E,0,[[],["usize"]]],[11,"last",E,E,0,[[],[R[0]]]],[11,"nth",E,E,0,[[["self"],["usize"]],[R[0]]]],[11,R[82],E,E,0,[[],["b"]]],[11,"all",E,E,0,[[["self"],["f"]],["bool"]]],[11,R[78],E,E,0,[[["self"]],[R[0]]]],[11,"extend",E,E,0,[[["self"],[T]]]],[11,R[9],E,E,0,[[["self"]],["target"]]],[11,R[9],E,E,0,[[["self"]],["str"]]],[11,R[9],E,E,0,[[["self"]]]],[11,R[32],E,E,0,[[["self"]],["str"]]],[11,R[32],E,E,0,[[["self"]],["target"]]],[11,R[32],E,E,0,[[["self"]]]],[11,"into",E,E,0,[[],[R[6]]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]]],"p":[[4,"Either"]]};
searchIndex["itertools"]={"doc":"Extra iterator adaptors, functions and macros.","i":[[4,"Either",R[30],R[15],N,N],[13,"Left",E,R[16],0,N],[13,"Right",E,R[17],0,N],[4,"Diff",E,"A type returned by the `diff_with` function.",N,N],[13,"FirstMismatch",E,"The index of the first non-matching element along with…",1,N],[13,"Shorter",E,"The total number of elements that were in `J` along with…",1,N],[13,"Longer",E,"The total number of elements that were in `I` along with…",1,N],[4,R[120],E,"`MinMaxResult` is an enum returned by `minmax`. See…",N,N],[13,"NoElements",E,"Empty iterator",2,N],[13,"OneElement",E,"Iterator with one element, so the minimum and maximum are…",2,N],[13,"MinMax",E,"More than one element in the iterator, the first element…",2,N],[4,R[158],E,"A value yielded by `WithPosition`. Indicates the position…",N,N],[13,"First",E,"This is the first element.",3,N],[13,"Middle",E,"This is neither the first nor the last element.",3,N],[13,"Last",E,"This is the last element.",3,N],[13,"Only",E,"This is the only element.",3,N],[4,R[121],E,"Value that either holds a single A or B, or both.",N,N],[13,"Both",E,"Both values are present.",4,N],[13,"Left",E,"Only the left value of type `A` is present.",4,N],[13,"Right",E,"Only the right value of type `B` is present.",4,N],[4,R[122],E,"An enum used for controlling the execution of…",N,N],[13,"Continue",E,"Continue folding with this value",5,N],[13,"Done",E,"Fold is complete and will return this value",5,N],[5,"concat",E,R[60],N,[[["i"]]]],[5,"cons_tuples",E,"Create an iterator that maps for example iterators of…",N,[[["i"]],["constuples"]]],[5,"diff_with",E,"Compares every element yielded by both `i` and `j` with…",N,[[["j"],["i"],["f"]],[[R[0],["diff"]],["diff"]]]],[5,R[50],E,R[20],N,[[["i"],["f"]],[R[52]]]],[5,"process_results",E,"“Lift” a function of the values of an iterator so that it…",N,[[["i"],["f"]],[R[6]]]],[5,"repeat_n",E,"Create an iterator that produces `n` repetitions of…",N,[[["a"],["usize"]],["repeatn"]]],[5,"repeat_call",E,"An iterator source that produces elements indefinitely by…",N,[[["f"]],["repeatcall"]]],[5,"unfold",E,"Creates a new unfold source with the specified closure as…",N,[[["f"],["st"]],["unfold"]]],[5,R[89],E,"Creates a new iterator that infinitely applies function to…",N,[[["f"],["st"]],[R[89]]]],[5,"multizip",E,"An iterator that generalizes .zip() and allows running…",N,[[[U]],["zip"]]],[5,R[18],E,"Create an iterator that interleaves elements in `i` and `j`.",N,[[["j"],["i"]],[R[18]]]],[5,"merge",E,"Create an iterator that merges elements in `i` and `j`.",N,[[["j"],["i"]],["merge"]]],[5,R[29],E,"Create an iterator where you can put back a single item",N,[[["i"]],["putback"]]],[5,"put_back_n",E,"Create an iterator where you can put back multiple values…",N,[[["i"]],[R[88]]]],[5,R[19],E,"An iterator adaptor that allows the user to peek at…",N,[[["i"]],[R[19]]]],[5,"kmerge",E,R[20],N,[[["i"]],["kmerge"]]],[5,"zip_eq",E,R[22],N,[[["j"],["i"]],["zipeq"]]],[5,R[48],E,"Return an iterator adaptor that merge-joins items from the…",N,[[["j"],["i"],["f"]],[R[49]]]],[5,"rciter",E,"Return an iterator inside a `Rc<RefCell<_>>` wrapper.",N,[[["i"]],["rciter"]]],[5,R[21],E,"Iterate `iterable` with a running index.",N,[[["i"]],[R[21]]]],[5,"rev",E,"Iterate `iterable` in reverse.",N,[[["i"]],["rev"]]],[5,"zip",E,R[22],N,[[["j"],["i"]],["zip"]]],[5,"chain",E,"Create an iterator that first iterates `i` and then `j`.",N,[[["j"],["i"]],["chain"]]],[5,"cloned",E,"Create an iterator that clones each element from &T to T",N,[[["i"]],["cloned"]]],[5,"fold",E,"Perform a fold operation over the iterable.",N,[[["i"],["b"],["f"]],["b"]]],[5,"all",E,"Test whether the predicate holds for all elements in the…",N,[[["i"],["f"]],["bool"]]],[5,"any",E,"Test whether the predicate holds for any elements in the…",N,[[["i"],["f"]],["bool"]]],[5,"max",E,"Return the maximum value of the iterable.",N,[[["i"]],[R[0]]]],[5,"min",E,"Return the minimum value of the iterable.",N,[[["i"]],[R[0]]]],[5,"join",E,"Combine all iterator elements into one String, seperated…",N,[[["str"],["i"]],[R[76]]]],[5,"sorted",E,R[62],N,[[["i"]],[R[63]]]],[5,"equal",E,"Return `true` if both iterables produce equal sequences…",N,[[["j"],["i"]],["bool"]]],[5,"assert_equal",E,"Assert that two iterables produce equal sequences, with…",N,[[["j"],["i"]]]],[5,"partition",E,"Partition a sequence using predicate `pred` so that…",N,[[["i"],["f"]],["usize"]]],[0,"structs",E,"The concrete iterator types.",N,N],[3,"DedupBy",R[40],"An iterator adaptor that removes repeated duplicates,…",N,N],[3,R[126],E,"An iterator adaptor that alternates elements from two…",N,N],[3,R[127],E,"An iterator adaptor that alternates elements from the two…",N,N],[3,"Product",E,R[23],N,N],[3,"PutBack",E,"An iterator adaptor that allows putting back a single item…",N,N],[3,"Batching",E,R[45],N,N],[3,"MapInto",E,"An iterator adapter to apply `Into` conversion to each…",N,N],[3,R[128],E,"An iterator adapter to apply a transformation within a…",N,N],[3,"MergeBy",E,R[27],N,N],[3,R[129],E,"An iterator adaptor that borrows from a `Clone`-able…",N,N],[3,R[130],E,"An iterator adaptor that filters `Option<A>` iterator…",N,N],[3,"Coalesce",E,"An iterator adaptor that may join together adjacent…",N,N],[3,R[131],E,"An iterator to iterate through all combinations in a…",N,N],[3,R[132],E,"An iterator adapter to get the positions of each element…",N,N],[3,"Update",E,"An iterator adapter to apply a mutating function to each…",N,N],[3,"Step",E,"An iterator adaptor that steps a number elements in the…",N,N],[3,R[133],E,R[23],N,N],[3,R[134],E,"An iterator to iterate through all the `k`-length…",N,N],[3,R[135],E,"An iterator to iterate through all the `n`-length…",N,N],[3,R[136],E,"An iterator that maps an iterator of tuples like `((A, B),…",N,N],[3,R[137],E,"Iterator returned for the error case of…",N,N],[3,"Format",E,R[24],N,N],[3,R[138],E,R[24],N,N],[3,R[139],E,"`ChunkLazy` is the storage for a lazy chunking operation.",N,N],[3,"Chunk",E,"An iterator for the elements in a single chunk.",N,N],[3,"Chunks",E,"An iterator that yields the Chunk iterators.",N,N],[3,"GroupBy",E,"`GroupBy` is the storage for the lazy grouping operation.",N,N],[3,"Group",E,"An iterator for the elements in a single group.",N,N],[3,"Groups",E,"An iterator that yields the Group iterators.",N,N],[3,R[140],E,R[42],N,N],[3,"KMergeBy",E,R[28],N,N],[3,R[141],E,"An iterator adaptor that merge-joins items from the two…",N,N],[3,R[123],E,"See `multipeek()` for more information.",N,N],[3,"PadUsing",E,"An iterator adaptor that pads a sequence to a minimum…",N,N],[3,R[142],E,"An iterator adaptor that takes items while a closure…",N,N],[3,R[143],E,"An iterator adaptor that iterates through all the…",N,N],[3,R[144],E,"An iterator that produces only the `T` values as long as…",N,N],[3,"PutBackN",E,"An iterator adaptor that allows putting multiple items in…",N,N],[3,"RcIter",E,"A wrapper for `Rc<RefCell<I>>`, that implements the…",N,N],[12,"rciter",E,"The boxed iterator.",6,N],[3,"RepeatN",E,"An iterator that produces n repetitions of an element.",N,N],[3,R[145],E,"See `repeat_call` for more information.",N,N],[3,"Unfold",E,"See `unfold` for more information.",N,N],[12,"state",E,"Internal state that will be passed to the closure on the…",7,N],[3,"Iterate",E,"An iterator that infinitely applies function to value and…",N,N],[3,"Tee",E,"One half of an iterator pair where both return the same…",N,N],[3,R[146],E,"An iterator over a incomplete tuple.",N,N],[3,R[147],E,"An iterator over all contiguous windows that produces…",N,N],[3,"Tuples",E,"An iterator that groups the items in tuples of a specific…",N,N],[3,"Unique",E,R[25],N,N],[3,"UniqueBy",E,R[25],N,N],[3,R[148],E,"An iterator adaptor that wraps each element in an…",N,N],[3,"ZipEq",E,R[26],N,N],[3,R[149],E,R[26],N,N],[3,"Zip",E,"See `multizip` for more information.",N,N],[6,"Dedup",E,"An iterator adaptor that removes repeated duplicates.",N,N],[6,"Merge",E,R[27],N,N],[6,"KMerge",E,R[28],N,N],[11,"with_value",E,"put back value `value` (builder method)",8,[[],["self"]]],[11,"into_parts",E,"Split the `PutBack` into its parts.",8,[[]]],[11,R[29],E,"Put back a single value to the front of the iterator.",8,[[["self"]]]],[11,"has_left",R[30],"If `Left`, or `Both`, return true, otherwise, return false.",4,[[["self"]],["bool"]]],[11,"has_right",E,"If `Right`, or `Both`, return true, otherwise, return false.",4,[[["self"]],["bool"]]],[11,R[94],E,"If Left, return true otherwise, return false. Exclusive…",4,[[["self"]],["bool"]]],[11,R[31],E,"If Right, return true otherwise, return false. Exclusive…",4,[[["self"]],["bool"]]],[11,"is_both",E,"If Right, return true otherwise, return false. Equivalent…",4,[[["self"]],["bool"]]],[11,"left",E,"If `Left`, or `Both`, return `Some` with the left value,…",4,[[],[R[0]]]],[11,"right",E,"If `Right`, or `Both`, return `Some` with the right value,…",4,[[],[R[0]]]],[11,"both",E,"If Both, return `Some` tuple containing left and right.",4,[[],[R[0]]]],[11,R[9],E,"Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A,…",4,[[["self"]],[["b"],[R[33]],["a"]]]],[11,R[32],E,"Converts from `&mut EitherOrBoth<A, B>` to…",4,[[["self"]],[["a"],[R[33]],["b"]]]],[11,"flip",E,"Convert `EitherOrBoth<A, B>` to `EitherOrBoth<B, A>`.",4,[[],[R[33]]]],[11,R[34],E,R[39],4,[[["f"]],[R[33]]]],[11,R[35],E,R[37],4,[[["f"]],[R[33]]]],[11,"map_any",E,"Apply the functions `f` and `g` on the value `a` and `b`…",4,[[["f"],["g"]],[R[33]]]],[11,R[36],E,R[37],4,[[["f"]],[R[33]]]],[11,R[38],E,R[39],4,[[["f"]],[R[33]]]],[11,"reduce",E,"Return either value of left, right, or the product of `f`…",4,[[["f"]],[T]]],[11,"into_option",E,"`into_option` creates an `Option` of type `(T, T)`. The…",2,[[],[R[0]]]],[11,"reset_peek",R[40],"Reset the peeking “cursor”",9,[[["self"]]]],[11,"peek",E,"Works exactly like `.next()` with the only difference that…",9,[[["self"]],[R[0]]]],[11,R[29],E,"Puts x in front of the iterator. The values are yielded in…",10,[[["self"]]]],[11,"into_buffer",E,"Return a buffer with the produced items that was not…",11,[[],["tuplebuffer"]]],[11,R[41],R[30],"Return the inner value.",3,[[],[T]]],[8,R[124],E,"An iterator that allows peeking at an element before…",N,N],[10,R[81],E,"Pass a reference to the next iterator element to the…",12,[[["self"],["f"]],[R[0]]]],[8,R[125],E,"An [`Iterator`] blanket implementation that provides extra…",N,N],[11,R[18],E,"Alternate elements from two iterators until both have run…",13,[[["j"]],[R[18]]]],[11,"interleave_shortest",E,"Alternate elements from two iterators until at least one…",13,[[["j"]],[R[84]]]],[11,R[43],E,R[42],13,[[],[R[43]]]],[11,"zip_longest",E,R[44],13,[[["j"]],[R[91]]]],[11,"zip_eq",E,R[44],13,[[["j"]],["zipeq"]]],[11,R[46],E,R[45],13,[[["f"]],[R[46]]]],[11,"group_by",E,"Return an iterable that can group iterator elements.…",13,[[["f"]],["groupby"]]],[11,"chunks",E,"Return an iterable that can chunk the iterator.",13,[[["usize"]],["intochunks"]]],[11,"tuple_windows",E,"Return an iterator over all contiguous windows producing…",13,[[],["tuplewindows"]]],[11,"tuples",E,"Return an iterator that groups the items in tuples of a…",13,[[],["tuples"]]],[11,"tee",E,"Split into an iterator pair that both yield all elements…",13,[[]]],[11,"step",E,"Return an iterator adaptor that steps `n` elements in the…",13,[[["usize"]],["step"]]],[11,"map_into",E,"Convert each item of the iterator using the `Into` trait.",13,[[],["mapinto"]]],[11,"map_results",E,"Return an iterator adaptor that applies the provided…",13,[[["f"]],["mapresults"]]],[11,"merge",E,R[47],13,[[["j"]],["merge"]]],[11,"merge_by",E,R[47],13,[[["j"],["f"]],["mergeby"]]],[11,R[48],E,"Create an iterator that merges items from both this and…",13,[[["j"],["f"]],[R[49]]]],[11,"kmerge",E,R[51],13,[[],["kmerge"]]],[11,R[50],E,R[51],13,[[["f"]],[R[52]]]],[11,"cartesian_product",E,R[53],13,[[["j"]],["product"]]],[11,"multi_cartesian_product",E,R[53],13,[[],[R[83]]]],[11,R[54],E,"Return an iterator adaptor that uses the passed-in closure…",13,[[["f"]],[R[54]]]],[11,"dedup",E,R[55],13,[[],["dedup"]]],[11,"dedup_by",E,R[55],13,[[["cmp"]],["dedupby"]]],[11,"unique",E,R[56],13,[[],["unique"]]],[11,"unique_by",E,R[56],13,[[["f"]],[R[90]]]],[11,"peeking_take_while",E,"Return an iterator adaptor that borrows from this iterator…",13,[[["self"],["f"]],["peekingtakewhile"]]],[11,"take_while_ref",E,"Return an iterator adaptor that borrows from a…",13,[[["self"],["f"]],["takewhileref"]]],[11,"while_some",E,"Return an iterator adaptor that filters `Option<A>`…",13,[[],[R[85]]]],[11,"tuple_combinations",E,R[53],13,[[],["tuplecombinations"]]],[11,R[57],E,R[53],13,[[["usize"]],[R[57]]]],[11,"combinations_with_replacement",E,"Return an iterator that iterates over the `k`-length…",13,[[["usize"]],[R[86]]]],[11,R[58],E,"Return an iterator adaptor that iterates over all…",13,[[["usize"]],[R[58]]]],[11,"pad_using",E,"Return an iterator adaptor that pads the sequence to a…",13,[[["usize"],["f"]],[R[87]]]],[11,"with_position",E,"Return an iterator adaptor that wraps each element in a…",13,[[],["withposition"]]],[11,R[59],E,"Return an iterator adaptor that yields the indices of all…",13,[[["p"]],[R[59]]]],[11,"update",E,"Return an iterator adaptor that applies a mutating…",13,[[["f"]],["update"]]],[11,"next_tuple",E,"Advances the iterator and returns the next items grouped…",13,[[["self"]],[R[0]]]],[11,"collect_tuple",E,"Collects all items from the iterator into a tuple of a…",13,[[],[R[0]]]],[11,"find_position",E,"Find the position and value of the first element…",13,[[["self"],["p"]],[R[0]]]],[11,"all_equal",E,"Check whether all elements compare equal.",13,[[["self"]],["bool"]]],[11,"dropping",E,"Consume the first `n` elements from the iterator eagerly,…",13,[[["usize"]],["self"]]],[11,"dropping_back",E,"Consume the last `n` elements from the iterator eagerly,…",13,[[["usize"]],["self"]]],[11,"foreach",E,"Run the closure `f` eagerly on each element of the iterator.",13,[[["f"]]]],[11,"concat",E,R[60],13,[[]]],[11,"collect_vec",E,"`.collect_vec()` is simply a type specialization of…",13,[[],["vec"]]],[11,"set_from",E,"Assign to each reference in `self` from the `from`…",13,[[["j"],["self"]],["usize"]]],[11,"join",E,"Combine all iterator elements into one String, separated…",13,[[["str"],["self"]],[R[76]]]],[11,"format",E,R[61],13,[[["str"]],["format"]]],[11,"format_with",E,R[61],13,[[["str"],["f"]],["formatwith"]]],[11,"fold_results",E,"Fold `Result` values from an iterator.",13,[[["self"],["b"],["f"]],[R[6]]]],[11,"fold_options",E,"Fold `Option` values from an iterator.",13,[[["self"],["b"],["f"]],[R[0]]]],[11,"fold1",E,"Accumulator of the elements in the iterator.",13,[[["f"]],[R[0]]]],[11,"tree_fold1",E,"Accumulate the elements in the iterator in a tree-like…",13,[[["f"]],[R[0]]]],[11,"fold_while",E,"An iterator method that applies a function, producing a…",13,[[["self"],["b"],["f"]],[R[92]]]],[11,"sum1",E,"Iterate over the entire iterator and add all the elements.",13,[[],[R[0]]]],[11,"product1",E,"Iterate over the entire iterator and multiply all the…",13,[[],[R[0]]]],[11,"sorted",E,R[62],13,[[],[R[63]]]],[11,"sorted_by",E,R[62],13,[[["f"]],[R[63]]]],[11,"sorted_by_key",E,R[62],13,[[["f"]],[R[63]]]],[11,"partition_map",E,"Collect all iterator elements into one of two partitions.…",13,[[["f"]]]],[11,"into_group_map",E,"Return a `HashMap` of keys mapped to `Vec`s of values.…",13,[[],[["hashmap",["vec"]],["vec"]]]],[11,"minmax",E,"Return the minimum and maximum elements in the iterator.",13,[[],[R[64]]]],[11,"minmax_by_key",E,R[65],13,[[["f"]],[R[64]]]],[11,"minmax_by",E,R[65],13,[[["f"]],[R[64]]]],[11,"exactly_one",E,"If the iterator yields exactly one element, that element…",13,[[],[[R[6],[R[66]]],[R[66]]]]],[11,R[41],E,"Return the value in the continue or done.",5,[[],[T]]],[11,"is_done",E,"Return true if `self` is `Done`, false if it is `Continue`.",5,[[["self"]],["bool"]]],[14,"iproduct",E,"Create an iterator over the “cartesian product” of…",N,N],[14,"izip",E,"Create an iterator running multiple iterators in lockstep.",N,N],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[5],E,E,0,[[],["i"]]],[11,R[71],E,E,0,[[["self"]],[T]]],[11,R[72],E,E,0,[[["self"],[T]]]],[11,R[75],E,E,0,[[["self"]],[R[76]]]],[11,R[67],E,E,0,[[[U]],[R[6]]]],[11,R[68],E,E,0,[[],[R[6]]]],[11,R[73],E,E,0,[[["self"]],[T]]],[11,R[69],E,E,0,[[["self"]],[T]]],[11,R[70],E,E,0,[[["self"]],[R[74]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[67],E,E,1,[[[U]],[R[6]]]],[11,R[68],E,E,1,[[],[R[6]]]],[11,R[73],E,E,1,[[["self"]],[T]]],[11,R[69],E,E,1,[[["self"]],[T]]],[11,R[70],E,E,1,[[["self"]],[R[74]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[71],E,E,2,[[["self"]],[T]]],[11,R[72],E,E,2,[[["self"],[T]]]],[11,R[67],E,E,2,[[[U]],[R[6]]]],[11,R[68],E,E,2,[[],[R[6]]]],[11,R[73],E,E,2,[[["self"]],[T]]],[11,R[69],E,E,2,[[["self"]],[T]]],[11,R[70],E,E,2,[[["self"]],[R[74]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[71],E,E,3,[[["self"]],[T]]],[11,R[72],E,E,3,[[["self"],[T]]]],[11,R[67],E,E,3,[[[U]],[R[6]]]],[11,R[68],E,E,3,[[],[R[6]]]],[11,R[73],E,E,3,[[["self"]],[T]]],[11,R[69],E,E,3,[[["self"]],[T]]],[11,R[70],E,E,3,[[["self"]],[R[74]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[71],E,E,4,[[["self"]],[T]]],[11,R[72],E,E,4,[[["self"],[T]]]],[11,R[67],E,E,4,[[[U]],[R[6]]]],[11,R[68],E,E,4,[[],[R[6]]]],[11,R[73],E,E,4,[[["self"]],[T]]],[11,R[69],E,E,4,[[["self"]],[T]]],[11,R[70],E,E,4,[[["self"]],[R[74]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[71],E,E,5,[[["self"]],[T]]],[11,R[72],E,E,5,[[["self"],[T]]]],[11,R[67],E,E,5,[[[U]],[R[6]]]],[11,R[68],E,E,5,[[],[R[6]]]],[11,R[73],E,E,5,[[["self"]],[T]]],[11,R[69],E,E,5,[[["self"]],[T]]],[11,R[70],E,E,5,[[["self"]],[R[74]]]],[11,"into",R[40],E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[5],E,E,14,[[],["i"]]],[11,R[71],E,E,14,[[["self"]],[T]]],[11,R[72],E,E,14,[[["self"],[T]]]],[11,R[67],E,E,14,[[[U]],[R[6]]]],[11,R[68],E,E,14,[[],[R[6]]]],[11,R[73],E,E,14,[[["self"]],[T]]],[11,R[69],E,E,14,[[["self"]],[T]]],[11,R[70],E,E,14,[[["self"]],[R[74]]]],[11,"into",E,E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[5],E,E,15,[[],["i"]]],[11,R[71],E,E,15,[[["self"]],[T]]],[11,R[72],E,E,15,[[["self"],[T]]]],[11,R[67],E,E,15,[[[U]],[R[6]]]],[11,R[68],E,E,15,[[],[R[6]]]],[11,R[73],E,E,15,[[["self"]],[T]]],[11,R[69],E,E,15,[[["self"]],[T]]],[11,R[70],E,E,15,[[["self"]],[R[74]]]],[11,"into",E,E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[5],E,E,16,[[],["i"]]],[11,R[71],E,E,16,[[["self"]],[T]]],[11,R[72],E,E,16,[[["self"],[T]]]],[11,R[67],E,E,16,[[[U]],[R[6]]]],[11,R[68],E,E,16,[[],[R[6]]]],[11,R[73],E,E,16,[[["self"]],[T]]],[11,R[69],E,E,16,[[["self"]],[T]]],[11,R[70],E,E,16,[[["self"]],[R[74]]]],[11,"into",E,E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[5],E,E,17,[[],["i"]]],[11,R[71],E,E,17,[[["self"]],[T]]],[11,R[72],E,E,17,[[["self"],[T]]]],[11,R[67],E,E,17,[[[U]],[R[6]]]],[11,R[68],E,E,17,[[],[R[6]]]],[11,R[73],E,E,17,[[["self"]],[T]]],[11,R[69],E,E,17,[[["self"]],[T]]],[11,R[70],E,E,17,[[["self"]],[R[74]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[5],E,E,8,[[],["i"]]],[11,R[71],E,E,8,[[["self"]],[T]]],[11,R[72],E,E,8,[[["self"],[T]]]],[11,R[67],E,E,8,[[[U]],[R[6]]]],[11,R[68],E,E,8,[[],[R[6]]]],[11,R[73],E,E,8,[[["self"]],[T]]],[11,R[69],E,E,8,[[["self"]],[T]]],[11,R[70],E,E,8,[[["self"]],[R[74]]]],[11,"into",E,E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[5],E,E,18,[[],["i"]]],[11,R[71],E,E,18,[[["self"]],[T]]],[11,R[72],E,E,18,[[["self"],[T]]]],[11,R[67],E,E,18,[[[U]],[R[6]]]],[11,R[68],E,E,18,[[],[R[6]]]],[11,R[73],E,E,18,[[["self"]],[T]]],[11,R[69],E,E,18,[[["self"]],[T]]],[11,R[70],E,E,18,[[["self"]],[R[74]]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[5],E,E,19,[[],["i"]]],[11,R[67],E,E,19,[[[U]],[R[6]]]],[11,R[68],E,E,19,[[],[R[6]]]],[11,R[73],E,E,19,[[["self"]],[T]]],[11,R[69],E,E,19,[[["self"]],[T]]],[11,R[70],E,E,19,[[["self"]],[R[74]]]],[11,"into",E,E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[5],E,E,20,[[],["i"]]],[11,R[67],E,E,20,[[[U]],[R[6]]]],[11,R[68],E,E,20,[[],[R[6]]]],[11,R[73],E,E,20,[[["self"]],[T]]],[11,R[69],E,E,20,[[["self"]],[T]]],[11,R[70],E,E,20,[[["self"]],[R[74]]]],[11,"into",E,E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[5],E,E,21,[[],["i"]]],[11,R[71],E,E,21,[[["self"]],[T]]],[11,R[72],E,E,21,[[["self"],[T]]]],[11,R[67],E,E,21,[[[U]],[R[6]]]],[11,R[68],E,E,21,[[],[R[6]]]],[11,R[73],E,E,21,[[["self"]],[T]]],[11,R[69],E,E,21,[[["self"]],[T]]],[11,R[70],E,E,21,[[["self"]],[R[74]]]],[11,"into",E,E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[5],E,E,22,[[],["i"]]],[11,R[67],E,E,22,[[[U]],[R[6]]]],[11,R[68],E,E,22,[[],[R[6]]]],[11,R[73],E,E,22,[[["self"]],[T]]],[11,R[69],E,E,22,[[["self"]],[T]]],[11,R[70],E,E,22,[[["self"]],[R[74]]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[5],E,E,23,[[],["i"]]],[11,R[71],E,E,23,[[["self"]],[T]]],[11,R[72],E,E,23,[[["self"],[T]]]],[11,R[67],E,E,23,[[[U]],[R[6]]]],[11,R[68],E,E,23,[[],[R[6]]]],[11,R[73],E,E,23,[[["self"]],[T]]],[11,R[69],E,E,23,[[["self"]],[T]]],[11,R[70],E,E,23,[[["self"]],[R[74]]]],[11,"into",E,E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[5],E,E,24,[[],["i"]]],[11,R[71],E,E,24,[[["self"]],[T]]],[11,R[72],E,E,24,[[["self"],[T]]]],[11,R[67],E,E,24,[[[U]],[R[6]]]],[11,R[68],E,E,24,[[],[R[6]]]],[11,R[73],E,E,24,[[["self"]],[T]]],[11,R[69],E,E,24,[[["self"]],[T]]],[11,R[70],E,E,24,[[["self"]],[R[74]]]],[11,"into",E,E,25,[[],[U]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[5],E,E,25,[[],["i"]]],[11,R[67],E,E,25,[[[U]],[R[6]]]],[11,R[68],E,E,25,[[],[R[6]]]],[11,R[73],E,E,25,[[["self"]],[T]]],[11,R[69],E,E,25,[[["self"]],[T]]],[11,R[70],E,E,25,[[["self"]],[R[74]]]],[11,"into",E,E,26,[[],[U]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[5],E,E,26,[[],["i"]]],[11,R[67],E,E,26,[[[U]],[R[6]]]],[11,R[68],E,E,26,[[],[R[6]]]],[11,R[73],E,E,26,[[["self"]],[T]]],[11,R[69],E,E,26,[[["self"]],[T]]],[11,R[70],E,E,26,[[["self"]],[R[74]]]],[11,"into",E,E,27,[[],[U]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[5],E,E,27,[[],["i"]]],[11,R[67],E,E,27,[[[U]],[R[6]]]],[11,R[68],E,E,27,[[],[R[6]]]],[11,R[73],E,E,27,[[["self"]],[T]]],[11,R[69],E,E,27,[[["self"]],[T]]],[11,R[70],E,E,27,[[["self"]],[R[74]]]],[11,"into",E,E,28,[[],[U]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[5],E,E,28,[[],["i"]]],[11,R[71],E,E,28,[[["self"]],[T]]],[11,R[72],E,E,28,[[["self"],[T]]]],[11,R[67],E,E,28,[[[U]],[R[6]]]],[11,R[68],E,E,28,[[],[R[6]]]],[11,R[73],E,E,28,[[["self"]],[T]]],[11,R[69],E,E,28,[[["self"]],[T]]],[11,R[70],E,E,28,[[["self"]],[R[74]]]],[11,"into",E,E,29,[[],[U]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[5],E,E,29,[[],["i"]]],[11,R[71],E,E,29,[[["self"]],[T]]],[11,R[72],E,E,29,[[["self"],[T]]]],[11,R[67],E,E,29,[[[U]],[R[6]]]],[11,R[68],E,E,29,[[],[R[6]]]],[11,R[73],E,E,29,[[["self"]],[T]]],[11,R[69],E,E,29,[[["self"]],[T]]],[11,R[70],E,E,29,[[["self"]],[R[74]]]],[11,"into",E,E,30,[[],[U]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[5],E,E,30,[[],["i"]]],[11,R[67],E,E,30,[[[U]],[R[6]]]],[11,R[68],E,E,30,[[],[R[6]]]],[11,R[73],E,E,30,[[["self"]],[T]]],[11,R[69],E,E,30,[[["self"]],[T]]],[11,R[70],E,E,30,[[["self"]],[R[74]]]],[11,"into",E,E,31,[[],[U]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[5],E,E,31,[[],["i"]]],[11,R[71],E,E,31,[[["self"]],[T]]],[11,R[72],E,E,31,[[["self"],[T]]]],[11,R[67],E,E,31,[[[U]],[R[6]]]],[11,R[68],E,E,31,[[],[R[6]]]],[11,R[73],E,E,31,[[["self"]],[T]]],[11,R[69],E,E,31,[[["self"]],[T]]],[11,R[70],E,E,31,[[["self"]],[R[74]]]],[11,"into",E,E,32,[[],[U]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[5],E,E,32,[[],["i"]]],[11,R[71],E,E,32,[[["self"]],[T]]],[11,R[72],E,E,32,[[["self"],[T]]]],[11,R[67],E,E,32,[[[U]],[R[6]]]],[11,R[68],E,E,32,[[],[R[6]]]],[11,R[73],E,E,32,[[["self"]],[T]]],[11,R[69],E,E,32,[[["self"]],[T]]],[11,R[70],E,E,32,[[["self"]],[R[74]]]],[11,"into",E,E,33,[[],[U]]],[11,"from",E,E,33,[[[T]],[T]]],[11,R[5],E,E,33,[[],["i"]]],[11,R[71],E,E,33,[[["self"]],[T]]],[11,R[72],E,E,33,[[["self"],[T]]]],[11,R[67],E,E,33,[[[U]],[R[6]]]],[11,R[68],E,E,33,[[],[R[6]]]],[11,R[73],E,E,33,[[["self"]],[T]]],[11,R[69],E,E,33,[[["self"]],[T]]],[11,R[70],E,E,33,[[["self"]],[R[74]]]],[11,"into",E,E,34,[[],[U]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[71],E,E,34,[[["self"]],[T]]],[11,R[72],E,E,34,[[["self"],[T]]]],[11,R[75],E,E,34,[[["self"]],[R[76]]]],[11,R[67],E,E,34,[[[U]],[R[6]]]],[11,R[68],E,E,34,[[],[R[6]]]],[11,R[73],E,E,34,[[["self"]],[T]]],[11,R[69],E,E,34,[[["self"]],[T]]],[11,R[70],E,E,34,[[["self"]],[R[74]]]],[11,"into",E,E,35,[[],[U]]],[11,"from",E,E,35,[[[T]],[T]]],[11,R[75],E,E,35,[[["self"]],[R[76]]]],[11,R[67],E,E,35,[[[U]],[R[6]]]],[11,R[68],E,E,35,[[],[R[6]]]],[11,R[73],E,E,35,[[["self"]],[T]]],[11,R[69],E,E,35,[[["self"]],[T]]],[11,R[70],E,E,35,[[["self"]],[R[74]]]],[11,"into",E,E,36,[[],[U]]],[11,"from",E,E,36,[[[T]],[T]]],[11,R[67],E,E,36,[[[U]],[R[6]]]],[11,R[68],E,E,36,[[],[R[6]]]],[11,R[73],E,E,36,[[["self"]],[T]]],[11,R[69],E,E,36,[[["self"]],[T]]],[11,R[70],E,E,36,[[["self"]],[R[74]]]],[11,"into",E,E,37,[[],[U]]],[11,"from",E,E,37,[[[T]],[T]]],[11,R[5],E,E,37,[[],["i"]]],[11,R[67],E,E,37,[[[U]],[R[6]]]],[11,R[68],E,E,37,[[],[R[6]]]],[11,R[73],E,E,37,[[["self"]],[T]]],[11,R[69],E,E,37,[[["self"]],[T]]],[11,R[70],E,E,37,[[["self"]],[R[74]]]],[11,"into",E,E,38,[[],[U]]],[11,"from",E,E,38,[[[T]],[T]]],[11,R[5],E,E,38,[[],["i"]]],[11,R[67],E,E,38,[[[U]],[R[6]]]],[11,R[68],E,E,38,[[],[R[6]]]],[11,R[73],E,E,38,[[["self"]],[T]]],[11,R[69],E,E,38,[[["self"]],[T]]],[11,R[70],E,E,38,[[["self"]],[R[74]]]],[11,"into",E,E,39,[[],[U]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[67],E,E,39,[[[U]],[R[6]]]],[11,R[68],E,E,39,[[],[R[6]]]],[11,R[73],E,E,39,[[["self"]],[T]]],[11,R[69],E,E,39,[[["self"]],[T]]],[11,R[70],E,E,39,[[["self"]],[R[74]]]],[11,"into",E,E,40,[[],[U]]],[11,"from",E,E,40,[[[T]],[T]]],[11,R[5],E,E,40,[[],["i"]]],[11,R[67],E,E,40,[[[U]],[R[6]]]],[11,R[68],E,E,40,[[],[R[6]]]],[11,R[73],E,E,40,[[["self"]],[T]]],[11,R[69],E,E,40,[[["self"]],[T]]],[11,R[70],E,E,40,[[["self"]],[R[74]]]],[11,"into",E,E,41,[[],[U]]],[11,"from",E,E,41,[[[T]],[T]]],[11,R[5],E,E,41,[[],["i"]]],[11,R[67],E,E,41,[[[U]],[R[6]]]],[11,R[68],E,E,41,[[],[R[6]]]],[11,R[73],E,E,41,[[["self"]],[T]]],[11,R[69],E,E,41,[[["self"]],[T]]],[11,R[70],E,E,41,[[["self"]],[R[74]]]],[11,"into",E,E,42,[[],[U]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[5],E,E,42,[[],["i"]]],[11,R[71],E,E,42,[[["self"]],[T]]],[11,R[72],E,E,42,[[["self"],[T]]]],[11,R[67],E,E,42,[[[U]],[R[6]]]],[11,R[68],E,E,42,[[],[R[6]]]],[11,R[73],E,E,42,[[["self"]],[T]]],[11,R[69],E,E,42,[[["self"]],[T]]],[11,R[70],E,E,42,[[["self"]],[R[74]]]],[11,"into",E,E,43,[[],[U]]],[11,"from",E,E,43,[[[T]],[T]]],[11,R[5],E,E,43,[[],["i"]]],[11,R[71],E,E,43,[[["self"]],[T]]],[11,R[72],E,E,43,[[["self"],[T]]]],[11,R[67],E,E,43,[[[U]],[R[6]]]],[11,R[68],E,E,43,[[],[R[6]]]],[11,R[73],E,E,43,[[["self"]],[T]]],[11,R[69],E,E,43,[[["self"]],[T]]],[11,R[70],E,E,43,[[["self"]],[R[74]]]],[11,"into",E,E,44,[[],[U]]],[11,"from",E,E,44,[[[T]],[T]]],[11,R[5],E,E,44,[[],["i"]]],[11,R[67],E,E,44,[[[U]],[R[6]]]],[11,R[68],E,E,44,[[],[R[6]]]],[11,R[73],E,E,44,[[["self"]],[T]]],[11,R[69],E,E,44,[[["self"]],[T]]],[11,R[70],E,E,44,[[["self"]],[R[74]]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[5],E,E,9,[[],["i"]]],[11,R[71],E,E,9,[[["self"]],[T]]],[11,R[72],E,E,9,[[["self"],[T]]]],[11,R[67],E,E,9,[[[U]],[R[6]]]],[11,R[68],E,E,9,[[],[R[6]]]],[11,R[73],E,E,9,[[["self"]],[T]]],[11,R[69],E,E,9,[[["self"]],[T]]],[11,R[70],E,E,9,[[["self"]],[R[74]]]],[11,"into",E,E,45,[[],[U]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[5],E,E,45,[[],["i"]]],[11,R[71],E,E,45,[[["self"]],[T]]],[11,R[72],E,E,45,[[["self"],[T]]]],[11,R[67],E,E,45,[[[U]],[R[6]]]],[11,R[68],E,E,45,[[],[R[6]]]],[11,R[73],E,E,45,[[["self"]],[T]]],[11,R[69],E,E,45,[[["self"]],[T]]],[11,R[70],E,E,45,[[["self"]],[R[74]]]],[11,"into",E,E,46,[[],[U]]],[11,"from",E,E,46,[[[T]],[T]]],[11,R[5],E,E,46,[[],["i"]]],[11,R[67],E,E,46,[[[U]],[R[6]]]],[11,R[68],E,E,46,[[],[R[6]]]],[11,R[73],E,E,46,[[["self"]],[T]]],[11,R[69],E,E,46,[[["self"]],[T]]],[11,R[70],E,E,46,[[["self"]],[R[74]]]],[11,"into",E,E,47,[[],[U]]],[11,"from",E,E,47,[[[T]],[T]]],[11,R[5],E,E,47,[[],["i"]]],[11,R[67],E,E,47,[[[U]],[R[6]]]],[11,R[68],E,E,47,[[],[R[6]]]],[11,R[73],E,E,47,[[["self"]],[T]]],[11,R[69],E,E,47,[[["self"]],[T]]],[11,R[70],E,E,47,[[["self"]],[R[74]]]],[11,"into",E,E,48,[[],[U]]],[11,"from",E,E,48,[[[T]],[T]]],[11,R[5],E,E,48,[[],["i"]]],[11,R[67],E,E,48,[[[U]],[R[6]]]],[11,R[68],E,E,48,[[],[R[6]]]],[11,R[73],E,E,48,[[["self"]],[T]]],[11,R[69],E,E,48,[[["self"]],[T]]],[11,R[70],E,E,48,[[["self"]],[R[74]]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[5],E,E,10,[[],["i"]]],[11,R[71],E,E,10,[[["self"]],[T]]],[11,R[72],E,E,10,[[["self"],[T]]]],[11,R[67],E,E,10,[[[U]],[R[6]]]],[11,R[68],E,E,10,[[],[R[6]]]],[11,R[73],E,E,10,[[["self"]],[T]]],[11,R[69],E,E,10,[[["self"]],[T]]],[11,R[70],E,E,10,[[["self"]],[R[74]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[5],E,E,6,[[],["i"]]],[11,R[71],E,E,6,[[["self"]],[T]]],[11,R[72],E,E,6,[[["self"],[T]]]],[11,R[67],E,E,6,[[[U]],[R[6]]]],[11,R[68],E,E,6,[[],[R[6]]]],[11,R[73],E,E,6,[[["self"]],[T]]],[11,R[69],E,E,6,[[["self"]],[T]]],[11,R[70],E,E,6,[[["self"]],[R[74]]]],[11,"into",E,E,49,[[],[U]]],[11,"from",E,E,49,[[[T]],[T]]],[11,R[5],E,E,49,[[],["i"]]],[11,R[67],E,E,49,[[[U]],[R[6]]]],[11,R[68],E,E,49,[[],[R[6]]]],[11,R[73],E,E,49,[[["self"]],[T]]],[11,R[69],E,E,49,[[["self"]],[T]]],[11,R[70],E,E,49,[[["self"]],[R[74]]]],[11,"into",E,E,50,[[],[U]]],[11,"from",E,E,50,[[[T]],[T]]],[11,R[5],E,E,50,[[],["i"]]],[11,R[67],E,E,50,[[[U]],[R[6]]]],[11,R[68],E,E,50,[[],[R[6]]]],[11,R[73],E,E,50,[[["self"]],[T]]],[11,R[69],E,E,50,[[["self"]],[T]]],[11,R[70],E,E,50,[[["self"]],[R[74]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[5],E,E,7,[[],["i"]]],[11,R[71],E,E,7,[[["self"]],[T]]],[11,R[72],E,E,7,[[["self"],[T]]]],[11,R[67],E,E,7,[[[U]],[R[6]]]],[11,R[68],E,E,7,[[],[R[6]]]],[11,R[73],E,E,7,[[["self"]],[T]]],[11,R[69],E,E,7,[[["self"]],[T]]],[11,R[70],E,E,7,[[["self"]],[R[74]]]],[11,"into",E,E,51,[[],[U]]],[11,"from",E,E,51,[[[T]],[T]]],[11,R[5],E,E,51,[[],["i"]]],[11,R[71],E,E,51,[[["self"]],[T]]],[11,R[72],E,E,51,[[["self"],[T]]]],[11,R[67],E,E,51,[[[U]],[R[6]]]],[11,R[68],E,E,51,[[],[R[6]]]],[11,R[73],E,E,51,[[["self"]],[T]]],[11,R[69],E,E,51,[[["self"]],[T]]],[11,R[70],E,E,51,[[["self"]],[R[74]]]],[11,"into",E,E,52,[[],[U]]],[11,"from",E,E,52,[[[T]],[T]]],[11,R[5],E,E,52,[[],["i"]]],[11,R[67],E,E,52,[[[U]],[R[6]]]],[11,R[68],E,E,52,[[],[R[6]]]],[11,R[73],E,E,52,[[["self"]],[T]]],[11,R[69],E,E,52,[[["self"]],[T]]],[11,R[70],E,E,52,[[["self"]],[R[74]]]],[11,"into",E,E,53,[[],[U]]],[11,"from",E,E,53,[[[T]],[T]]],[11,R[5],E,E,53,[[],["i"]]],[11,R[67],E,E,53,[[[U]],[R[6]]]],[11,R[68],E,E,53,[[],[R[6]]]],[11,R[73],E,E,53,[[["self"]],[T]]],[11,R[69],E,E,53,[[["self"]],[T]]],[11,R[70],E,E,53,[[["self"]],[R[74]]]],[11,"into",E,E,54,[[],[U]]],[11,"from",E,E,54,[[[T]],[T]]],[11,R[5],E,E,54,[[],["i"]]],[11,R[67],E,E,54,[[[U]],[R[6]]]],[11,R[68],E,E,54,[[],[R[6]]]],[11,R[73],E,E,54,[[["self"]],[T]]],[11,R[69],E,E,54,[[["self"]],[T]]],[11,R[70],E,E,54,[[["self"]],[R[74]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[5],E,E,11,[[],["i"]]],[11,R[67],E,E,11,[[[U]],[R[6]]]],[11,R[68],E,E,11,[[],[R[6]]]],[11,R[73],E,E,11,[[["self"]],[T]]],[11,R[69],E,E,11,[[["self"]],[T]]],[11,R[70],E,E,11,[[["self"]],[R[74]]]],[11,"into",E,E,55,[[],[U]]],[11,"from",E,E,55,[[[T]],[T]]],[11,R[5],E,E,55,[[],["i"]]],[11,R[71],E,E,55,[[["self"]],[T]]],[11,R[72],E,E,55,[[["self"],[T]]]],[11,R[67],E,E,55,[[[U]],[R[6]]]],[11,R[68],E,E,55,[[],[R[6]]]],[11,R[73],E,E,55,[[["self"]],[T]]],[11,R[69],E,E,55,[[["self"]],[T]]],[11,R[70],E,E,55,[[["self"]],[R[74]]]],[11,"into",E,E,56,[[],[U]]],[11,"from",E,E,56,[[[T]],[T]]],[11,R[5],E,E,56,[[],["i"]]],[11,R[71],E,E,56,[[["self"]],[T]]],[11,R[72],E,E,56,[[["self"],[T]]]],[11,R[67],E,E,56,[[[U]],[R[6]]]],[11,R[68],E,E,56,[[],[R[6]]]],[11,R[73],E,E,56,[[["self"]],[T]]],[11,R[69],E,E,56,[[["self"]],[T]]],[11,R[70],E,E,56,[[["self"]],[R[74]]]],[11,"into",E,E,57,[[],[U]]],[11,"from",E,E,57,[[[T]],[T]]],[11,R[5],E,E,57,[[],["i"]]],[11,R[67],E,E,57,[[[U]],[R[6]]]],[11,R[68],E,E,57,[[],[R[6]]]],[11,R[73],E,E,57,[[["self"]],[T]]],[11,R[69],E,E,57,[[["self"]],[T]]],[11,R[70],E,E,57,[[["self"]],[R[74]]]],[11,"into",E,E,58,[[],[U]]],[11,"from",E,E,58,[[[T]],[T]]],[11,R[5],E,E,58,[[],["i"]]],[11,R[71],E,E,58,[[["self"]],[T]]],[11,R[72],E,E,58,[[["self"],[T]]]],[11,R[67],E,E,58,[[[U]],[R[6]]]],[11,R[68],E,E,58,[[],[R[6]]]],[11,R[73],E,E,58,[[["self"]],[T]]],[11,R[69],E,E,58,[[["self"]],[T]]],[11,R[70],E,E,58,[[["self"]],[R[74]]]],[11,"into",E,E,59,[[],[U]]],[11,"from",E,E,59,[[[T]],[T]]],[11,R[5],E,E,59,[[],["i"]]],[11,R[71],E,E,59,[[["self"]],[T]]],[11,R[72],E,E,59,[[["self"],[T]]]],[11,R[67],E,E,59,[[[U]],[R[6]]]],[11,R[68],E,E,59,[[],[R[6]]]],[11,R[73],E,E,59,[[["self"]],[T]]],[11,R[69],E,E,59,[[["self"]],[T]]],[11,R[70],E,E,59,[[["self"]],[R[74]]]],[11,"into",E,E,60,[[],[U]]],[11,"from",E,E,60,[[[T]],[T]]],[11,R[5],E,E,60,[[],["i"]]],[11,R[71],E,E,60,[[["self"]],[T]]],[11,R[72],E,E,60,[[["self"],[T]]]],[11,R[67],E,E,60,[[[U]],[R[6]]]],[11,R[68],E,E,60,[[],[R[6]]]],[11,R[73],E,E,60,[[["self"]],[T]]],[11,R[69],E,E,60,[[["self"]],[T]]],[11,R[70],E,E,60,[[["self"]],[R[74]]]],[11,R[9],R[30],E,0,[[["self"]],["target"]]],[11,R[9],E,E,0,[[["self"]],["str"]]],[11,R[9],E,E,0,[[["self"]]]],[11,"cmp",E,E,0,[[["self"],[R[1]]],[R[8]]]],[11,"into",E,E,0,[[],[R[6]]]],[11,"eq",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,R[77],E,E,0,[[["self"],[R[1]]],[[R[0],[R[8]]],[R[8]]]]],[11,"lt",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"fmt",E,E,0,[[[R[7]],["self"]],[["error"],[R[6],["error"]]]]],[11,"from",E,E,0,[[[R[6]]],[R[1]]]],[11,R[78],E,E,0,[[["self"]],[R[0]]]],[11,"fmt",E,E,0,[[[R[7]],["self"]],[["error"],[R[6],["error"]]]]],[11,R[32],E,E,0,[[["self"]],["str"]]],[11,R[32],E,E,0,[[["self"]],["target"]]],[11,R[32],E,E,0,[[["self"]]]],[11,"deref",E,E,0,[[["self"]]]],[11,"next",E,E,0,[[["self"]],[R[0]]]],[11,R[79],E,E,0,[[["self"]]]],[11,"fold",E,E,0,[[["acc"],["g"]],["acc"]]],[11,"count",E,E,0,[[],["usize"]]],[11,"last",E,E,0,[[],[R[0]]]],[11,"nth",E,E,0,[[["self"],["usize"]],[R[0]]]],[11,R[82],E,E,0,[[],["b"]]],[11,"all",E,E,0,[[["self"],["f"]],["bool"]]],[11,R[80],E,E,0,[[["self"]]]],[11,"extend",E,E,0,[[["self"],[T]]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,R[81],R[40],E,9,[[["self"],["f"]],[R[0]]]],[11,R[81],E,E,8,[[["self"],["f"]],[R[0]]]],[11,R[81],E,E,10,[[["self"],["f"]],[R[0]]]],[11,"drop",E,E,40,[[["self"]]]],[11,"drop",E,E,37,[[["self"]]]],[11,"into",R[30],E,4,[[],[[R[1]],[R[0],[R[1]]]]]],[11,"from",R[40],E,60,[[],["self"]]],[11,"from",E,E,60,[[],["self"]]],[11,"from",E,E,60,[[],["self"]]],[11,"from",E,E,60,[[],["self"]]],[11,"from",E,E,60,[[],["self"]]],[11,"from",E,E,60,[[],["self"]]],[11,"from",E,E,60,[[],["self"]]],[11,"from",E,E,60,[[],["self"]]],[11,"next",E,E,29,[[["self"]],[R[0]]]],[11,"count",E,E,29,[[],["usize"]]],[11,R[79],E,E,29,[[["self"]]]],[11,"last",E,E,29,[[],[R[0]]]],[11,"next",E,E,15,[[["self"]],[R[0]]]],[11,R[79],E,E,15,[[["self"]]]],[11,"next",E,E,16,[[["self"]],[R[0]]]],[11,R[79],E,E,16,[[["self"]]]],[11,"next",E,E,8,[[["self"]],[R[0]]]],[11,R[79],E,E,8,[[["self"]]]],[11,"all",E,E,8,[[["self"],["g"]],["bool"]]],[11,"fold",E,E,8,[[["acc"],["g"]],["acc"]]],[11,"next",E,E,17,[[["self"]],[R[0]]]],[11,R[79],E,E,17,[[["self"]]]],[11,"fold",E,E,17,[[["acc"],["g"]],["acc"]]],[11,"next",E,E,18,[[["self"]],[R[0]]]],[11,R[79],E,E,18,[[["self"]]]],[11,"next",E,E,28,[[["self"]],[R[0]]]],[11,R[79],E,E,28,[[["self"]]]],[11,"next",E,E,21,[[["self"]],[R[0]]]],[11,R[79],E,E,21,[[["self"]]]],[11,"next",E,E,24,[[["self"]],[R[0]]]],[11,R[79],E,E,24,[[["self"]]]],[11,"next",E,E,14,[[["self"]],[R[0]]]],[11,R[79],E,E,14,[[["self"]]]],[11,"fold",E,E,14,[[["acc"],["g"]],["acc"]]],[11,"next",E,E,22,[[["self"]],[R[0]]]],[11,R[79],E,E,22,[[["self"]]]],[11,"next",E,E,23,[[["self"]],[R[0]]]],[11,R[79],E,E,23,[[["self"]]]],[11,"next",E,E,25,[[["self"]],[R[0]]]],[11,"next",E,E,19,[[["self"]],[R[0]]]],[11,R[79],E,E,19,[[["self"]]]],[11,"fold",E,E,19,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,20,[[["self"]],[R[0]]]],[11,R[79],E,E,20,[[["self"]]]],[11,"fold",E,E,20,[[["acc"],["fold"]],["acc"]]],[11,R[82],E,E,20,[[],["c"]]],[11,"next",E,E,26,[[["self"]],[R[0]]]],[11,R[79],E,E,26,[[["self"]]]],[11,"next",E,E,27,[[["self"]],[R[0]]]],[11,R[79],E,E,27,[[["self"]]]],[11,"fold",E,E,27,[[["acc"],["g"]],["acc"]]],[11,R[82],E,E,27,[[],["c"]]],[11,"next",E,E,32,[[["self"]],[R[0]]]],[11,R[79],E,E,32,[[["self"]]]],[11,"fold",E,E,32,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,32,[[["self"]],[R[0]]]],[11,R[79],E,E,32,[[["self"]]]],[11,"fold",E,E,32,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,32,[[["self"]],[R[0]]]],[11,R[79],E,E,32,[[["self"]]]],[11,"fold",E,E,32,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,32,[[["self"]],[R[0]]]],[11,R[79],E,E,32,[[["self"]]]],[11,"fold",E,E,32,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,32,[[["self"]],[R[0]]]],[11,R[79],E,E,32,[[["self"]]]],[11,"fold",E,E,32,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,32,[[["self"]],[R[0]]]],[11,R[79],E,E,32,[[["self"]]]],[11,"fold",E,E,32,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,30,[[["self"]],[R[0]]]],[11,"next",E,E,31,[[["self"]],[R[0]]]],[11,"next",E,E,33,[[["self"]],[R[0]]]],[11,R[79],E,E,33,[[["self"]]]],[11,"next",E,E,41,[[["self"]],[R[0]]]],[11,"next",E,E,40,[[["self"]],[R[0]]]],[11,"next",E,E,38,[[["self"]],[R[0]]]],[11,"next",E,E,37,[[["self"]],[R[0]]]],[11,"next",E,E,42,[[["self"]],[R[0]]]],[11,R[79],E,E,42,[[["self"]]]],[11,"fold",E,E,42,[[["b"],["f"]],["b"]]],[11,"next",E,E,43,[[["self"]],[R[0]]]],[11,R[79],E,E,43,[[["self"]]]],[11,"next",E,E,44,[[["self"]],[R[0]]]],[11,R[79],E,E,44,[[["self"]]]],[11,"next",E,E,9,[[["self"]],[R[0]]]],[11,R[79],E,E,9,[[["self"]]]],[11,"next",E,E,45,[[["self"]],[R[0]]]],[11,R[79],E,E,45,[[["self"]]]],[11,"next",E,E,46,[[["self"]],[R[0]]]],[11,R[79],E,E,46,[[["self"]]]],[11,"next",E,E,47,[[["self"]],[R[0]]]],[11,"count",E,E,47,[[],["usize"]]],[11,R[79],E,E,47,[[["self"]]]],[11,"next",E,E,48,[[["self"]],[R[0]]]],[11,R[79],E,E,48,[[["self"]]]],[11,"next",E,E,10,[[["self"]],[R[0]]]],[11,R[79],E,E,10,[[["self"]]]],[11,"next",E,E,6,[[["self"]],[R[0]]]],[11,R[79],E,E,6,[[["self"]]]],[11,"next",E,E,49,[[["self"]],[R[0]]]],[11,R[79],E,E,49,[[["self"]]]],[11,"next",E,E,50,[[["self"]],[R[0]]]],[11,R[79],E,E,50,[[["self"]]]],[11,"next",E,E,7,[[["self"]],[R[0]]]],[11,R[79],E,E,7,[[["self"]]]],[11,"next",E,E,51,[[["self"]],[R[0]]]],[11,R[79],E,E,51,[[["self"]]]],[11,"next",E,E,52,[[["self"]],[R[0]]]],[11,R[79],E,E,52,[[["self"]]]],[11,"next",E,E,53,[[["self"]],[R[0]]]],[11,R[79],E,E,53,[[["self"]]]],[11,"next",E,E,11,[[["self"]],[R[0]]]],[11,"next",E,E,54,[[["self"]],[R[0]]]],[11,"next",E,E,56,[[["self"]],[R[0]]]],[11,R[79],E,E,56,[[["self"]]]],[11,"count",E,E,56,[[],["usize"]]],[11,"next",E,E,55,[[["self"]],[R[0]]]],[11,R[79],E,E,55,[[["self"]]]],[11,"count",E,E,55,[[],["usize"]]],[11,"next",E,E,57,[[["self"]],[R[0]]]],[11,R[79],E,E,57,[[["self"]]]],[11,"next",E,E,58,[[["self"]],[R[0]]]],[11,R[79],E,E,58,[[["self"]]]],[11,"next",E,E,59,[[["self"]],[R[0]]]],[11,R[79],E,E,59,[[["self"]]]],[11,"next",E,E,60,[[["self"]],[R[0]]]],[11,R[79],E,E,60,[[["self"]]]],[11,"next",E,E,60,[[["self"]],[R[0]]]],[11,R[79],E,E,60,[[["self"]]]],[11,"next",E,E,60,[[["self"]],[R[0]]]],[11,R[79],E,E,60,[[["self"]]]],[11,"next",E,E,60,[[["self"]],[R[0]]]],[11,R[79],E,E,60,[[["self"]]]],[11,"next",E,E,60,[[["self"]],[R[0]]]],[11,R[79],E,E,60,[[["self"]]]],[11,"next",E,E,60,[[["self"]],[R[0]]]],[11,R[79],E,E,60,[[["self"]]]],[11,"next",E,E,60,[[["self"]],[R[0]]]],[11,R[79],E,E,60,[[["self"]]]],[11,"next",E,E,60,[[["self"]],[R[0]]]],[11,R[79],E,E,60,[[["self"]]]],[11,R[78],E,E,19,[[["self"]],[R[0]]]],[11,R[78],E,E,26,[[["self"]],[R[0]]]],[11,R[78],E,E,27,[[["self"]],[R[0]]]],[11,R[78],E,E,32,[[["self"]],[R[0]]]],[11,R[78],E,E,32,[[["self"]],[R[0]]]],[11,R[78],E,E,32,[[["self"]],[R[0]]]],[11,R[78],E,E,32,[[["self"]],[R[0]]]],[11,R[78],E,E,32,[[["self"]],[R[0]]]],[11,R[78],E,E,32,[[["self"]],[R[0]]]],[11,R[78],E,E,45,[[["self"]],[R[0]]]],[11,R[78],E,E,6,[[["self"]],[R[0]]]],[11,R[78],E,E,49,[[["self"]],[R[0]]]],[11,R[78],E,E,59,[[["self"]],[R[0]]]],[11,"clone",E,E,29,[[["self"]],[R[83]]]],[11,"clone",E,E,15,[[["self"]],[R[18]]]],[11,"clone",E,E,16,[[["self"]],[R[84]]]],[11,"clone",E,E,8,[[["self"]],["putback"]]],[11,"clone",E,E,17,[[["self"]],["product"]]],[11,"clone",E,E,18,[[["self"]],[R[46]]]],[11,"clone",E,E,28,[[["self"]],["step"]]],[11,"clone",E,E,21,[[["self"]],["self"]]],[11,"clone",E,E,24,[[["self"]],["self"]]],[11,"clone",E,E,14,[[["self"]],["self"]]],[11,"clone",E,E,23,[[["self"]],[R[85]]]],[11,"clone",R[30],E,4,[[["self"]],[R[33]]]],[11,"clone",R[40],E,32,[[["self"]],["self"]]],[11,"clone",E,E,31,[[["self"]],[R[86]]]],[11,"clone",E,E,33,[[["self"]],[R[66]]]],[11,"clone",E,E,34,[[["self"]],["format"]]],[11,"clone",E,E,42,[[["self"]],[R[43]]]],[11,"clone",E,E,43,[[["self"]],[R[52]]]],[11,"clone",R[30],E,2,[[["self"]],[R[64]]]],[11,"clone",R[40],E,9,[[["self"]],[R[19]]]],[11,"clone",E,E,45,[[["self"]],[R[87]]]],[11,"clone",E,E,10,[[["self"]],[R[88]]]],[11,"clone",E,E,6,[[["self"]],["rciter"]]],[11,"clone",E,E,7,[[["self"]],["unfold"]]],[11,"clone",E,E,51,[[["self"]],[R[89]]]],[11,"clone",E,E,56,[[["self"]],[R[90]]]],[11,"clone",E,E,55,[[["self"]],["unique"]]],[11,"clone",R[30],E,3,[[["self"]],[R[93]]]],[11,"clone",R[40],E,58,[[["self"]],["zipeq"]]],[11,"clone",E,E,59,[[["self"]],[R[91]]]],[11,"clone",E,E,60,[[["self"]],["zip"]]],[11,"clone",R[30],E,5,[[["self"]],[R[92]]]],[11,"eq",E,E,4,[[["self"],[R[33]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[33]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[64]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[64]]],["bool"]]],[11,"eq",E,E,3,[[[R[93]],["self"]],["bool"]]],[11,"ne",E,E,3,[[[R[93]],["self"]],["bool"]]],[11,"eq",E,E,5,[[["self"],[R[92]]],["bool"]]],[11,"ne",E,E,5,[[["self"],[R[92]]],["bool"]]],[11,"fmt",R[40],E,34,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,34,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,35,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,34,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,15,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,16,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,8,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,17,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,18,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,28,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,21,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,24,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,14,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,22,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,23,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,25,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[30],E,4,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[40],E,32,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,30,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,31,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,33,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,34,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,42,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,43,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,44,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[30],E,2,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[40],E,9,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,47,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,48,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,10,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,6,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,49,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,50,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,7,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,51,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,52,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,53,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,54,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,56,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,55,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[30],E,3,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[40],E,58,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,59,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,60,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[30],E,5,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[40],E,34,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,34,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,34,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,34,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,34,[[["self"],[R[7]]],[R[6]]]],[11,R[94],R[30],R[95],0,[[["self"]],["bool"]]],[11,R[31],E,R[96],0,[[["self"]],["bool"]]],[11,"left",E,R[97],0,[[],[R[0]]]],[11,"right",E,R[98],0,[[],[R[0]]]],[11,R[9],E,R[99],0,[[["self"]],[["l"],[R[1]],["r"]]]],[11,R[32],E,R[100],0,[[["self"]],[[R[1]],["l"],["r"]]]],[11,"flip",E,R[101],0,[[],[R[1]]]],[11,R[34],E,R[2],0,[[["f"]],[R[1]]]],[11,R[35],E,R[3],0,[[["f"]],[R[1]]]],[11,R[1],E,R[102],0,[[["f"],["g"]],[T]]],[11,R[103],E,R[104],0,[[["ctx"],["f"],["g"]],[T]]],[11,R[36],E,R[2],0,[[["f"]],[R[1]]]],[11,R[38],E,R[3],0,[[["f"]],[R[1]]]],[11,R[5],E,R[105],0,[[],[R[1]]]],[11,"left_or",E,R[106],0,[[["l"]],["l"]]],[11,R[107],E,R[108],0,[[],["l"]]],[11,R[109],E,R[110],0,[[["f"]],["l"]]],[11,"right_or",E,R[111],0,[[["r"]],["r"]]],[11,R[112],E,R[113],0,[[],["r"]]],[11,R[114],E,R[115],0,[[["f"]],["r"]]],[11,R[116],E,R[4],0,[[]]],[11,R[117],E,R[4],0,[[]]],[11,R[41],E,R[118],0,[[],[T]]],[11,"map",E,R[119],0,[[["f"]],[R[1]]]]],"p":[[4,"Either"],[4,"Diff"],[4,R[120]],[4,R[158]],[4,R[121]],[4,R[122]],[3,"RcIter"],[3,"Unfold"],[3,"PutBack"],[3,R[123]],[3,"PutBackN"],[3,"Tuples"],[8,R[124]],[8,R[125]],[3,"DedupBy"],[3,R[126]],[3,R[127]],[3,"Product"],[3,"Batching"],[3,"MapInto"],[3,R[128]],[3,"MergeBy"],[3,R[129]],[3,R[130]],[3,"Coalesce"],[3,R[131]],[3,R[132]],[3,"Update"],[3,"Step"],[3,R[133]],[3,R[134]],[3,R[135]],[3,R[136]],[3,R[137]],[3,"Format"],[3,R[138]],[3,R[139]],[3,"Chunk"],[3,"Chunks"],[3,"GroupBy"],[3,"Group"],[3,"Groups"],[3,R[140]],[3,"KMergeBy"],[3,R[141]],[3,"PadUsing"],[3,R[142]],[3,R[143]],[3,R[144]],[3,"RepeatN"],[3,R[145]],[3,"Iterate"],[3,"Tee"],[3,R[146]],[3,R[147]],[3,"Unique"],[3,"UniqueBy"],[3,R[148]],[3,"ZipEq"],[3,R[149]],[3,"Zip"]]};
searchIndex["shogi"]={"doc":"A library for implementing Shogi application.","i":[[0,R[150],"shogi",E,N,N],[3,"Bitboard",R[170],"Represents a board state in which each square takes two…",N,N],[3,"Factory",E,"Creates various bitboard instances.",N,N],[11,"init",E,"Pre-calculate complex bitboards for faster table lookup.…",0,[[]]],[11,"attacks_from",E,"Returns a bitboard in which squares attacked by the given…",0,[[["color"],["square"],[R[155]]],[R[150]]]],[11,"rook_attack",E,"Returns a bitboard in which squares attacked by Rook at…",0,[[["square"],[R[150]]],[R[150]]]],[11,"bishop_attack",E,"Returns a bitboard in which squares attacked by Bishop at…",0,[[["square"],[R[150]]],[R[150]]]],[11,"lance_attack",E,"Returns a bitboard in which squares attacked by Lance at…",0,[[["color"],["square"],[R[150]]],[R[150]]]],[11,"promote_zone",E,"Returns a bitboard in which squares in opposite player's…",0,[[["color"]],[R[150]]]],[11,"between",E,"Returns a bitboard in which squares between the given two…",0,[[["square"]],[R[150]]]],[11,"empty",E,"Returns an empty instance of `Bitboard`.",1,[[],[R[150]]]],[11,"is_any",E,"Checks if any of its squares is filled.",1,[[["self"]],["bool"]]],[11,"is_empty",E,"Checks if all of its squares are empty.",1,[[["self"]],["bool"]]],[11,"clear_at",E,"Sets the given square as empty.",1,[[["self"],["square"]]]],[11,"count",E,"Returns the number of squares filled.",1,[[["self"]],["u32"]]],[11,"pop",E,"Sets the first filled square as empty and returns that…",1,[[["self"]],["square"]]],[0,"color","shogi",E,N,N],[3,R[184],R[171],"This struct is created by the [`iter`] method on [`Color`].",N,N],[4,"Color",E,"Represents each side of player. Black player moves first.",N,N],[13,"Black",E,E,2,N],[13,"White",E,E,2,N],[11,"iter",E,R[164],2,[[],["coloriter"]]],[11,"flip",E,"Returns the color of the opposite side.",2,[[["self"]],["color"]]],[11,"index",E,R[157],2,[[["self"]],["usize"]]],[0,"error","shogi",E,N,N],[3,R[185],R[172],"The error type for SFEN serialize/deserialize operations.",N,N],[4,R[180],E,"Represents an error occurred during making a move.",N,N],[13,"InCheck",E,E,3,N],[13,"Nifu",E,E,3,N],[13,"Uchifuzume",E,E,3,N],[13,"PerpetualCheckWin",E,E,3,N],[13,"PerpetualCheckLose",E,E,3,N],[13,"EnemysTurn",E,E,3,N],[13,"NonMovablePiece",E,E,3,N],[13,"Inconsistent",E,E,3,N],[13,"Repetition",E,E,3,N],[0,"hand","shogi",E,N,N],[3,"Hand",R[173],"Manages the number of each pieces in each player's hand.",N,N],[11,"get",E,"Returns a number of the given piece.",4,[[["piece"],["self"]],["u8"]]],[11,"set",E,"Sets a number of the given piece.",4,[[["piece"],["self"],["u8"]]]],[11,"increment",E,"Increments a number of the given piece.",4,[[["piece"],["self"]]]],[11,"decrement",E,"Decrements a number of the given piece.",4,[[["piece"],["self"]]]],[11,"clear",E,"Clears all pieces.",4,[[["self"]]]],[0,"moves","shogi",E,N,N],[4,"Move",R[151],"Represents a move which either is a normal move or a drop…",N,N],[13,"Normal",E,E,5,N],[12,"from",R[152],E,5,N],[12,"to",E,E,5,N],[12,"promote",E,E,5,N],[13,"Drop",R[151],E,5,N],[12,"to",R[152],E,5,N],[12,R[153],E,E,5,N],[11,R[154],R[151],"Creates a new instance of `Move` from SFEN formatted string.",5,[[["str"]],[[R[0],["move"]],["move"]]]],[0,"piece","shogi",E,N,N],[3,"Piece",R[174],"Represents a piece on the game board.",N,N],[12,R[153],E,E,6,N],[12,"color",E,E,6,N],[11,R[154],E,"Creates a new instance of `Piece` from SFEN formatted…",6,[[["char"]],[[R[0],["piece"]],["piece"]]]],[11,"promote",E,"Returns an instance of `Piece` after promotion.",6,[[["self"]],[[R[0],["piece"]],["piece"]]]],[11,R[156],E,"Returns an instance of `Piece` before promotion.",6,[[["self"]],[[R[0],["piece"]],["piece"]]]],[11,"flip",E,"Returns an instance of `Piece` with the reversed color.",6,[[["self"]],["piece"]]],[11,"is_placeable_at",E,"Tests if it is legal to place this piece at the given…",6,[[["square"],["self"]],["bool"]]],[0,R[153],"shogi",E,N,N],[3,R[186],R[175],"This struct is created by the [`iter`] method on…",N,N],[4,R[181],E,"Represents a kind of pieces.",N,N],[13,"King",E,E,7,N],[13,"Rook",E,E,7,N],[13,"Bishop",E,E,7,N],[13,"Gold",E,E,7,N],[13,"Silver",E,E,7,N],[13,"Knight",E,E,7,N],[13,"Lance",E,E,7,N],[13,"Pawn",E,E,7,N],[13,"ProRook",E,E,7,N],[13,"ProBishop",E,E,7,N],[13,"ProSilver",E,E,7,N],[13,"ProKnight",E,E,7,N],[13,"ProLance",E,E,7,N],[13,"ProPawn",E,E,7,N],[11,"iter",E,"Returns an iterator over all variants.",7,[[],["piecetypeiter"]]],[11,R[154],E,"Creates a new instance of `PieceType` from SFEN formatted…",7,[[["char"]],[[R[0],[R[155]]],[R[155]]]]],[11,"promote",E,"Returns an instance of `PieceType` after promotion.",7,[[["self"]],[[R[0],[R[155]]],[R[155]]]]],[11,R[156],E,"Returns an instance of `PieceType` before promotion.",7,[[["self"]],[[R[0],[R[155]]],[R[155]]]]],[11,"is_hand_piece",E,"Checks if this piece type can be a part of hand pieces.",7,[[["self"]],["bool"]]],[11,"index",E,R[157],7,[[["self"]],["usize"]]],[0,R[93],"shogi",E,N,N],[3,R[158],R[159],"Represents a state of the game.",N,N],[4,R[182],E,"MoveRecord stores information necessary to undo the move.",N,N],[13,"Normal",E,E,8,N],[12,"from",R[160],E,8,N],[12,"to",E,E,8,N],[12,"moved",E,E,8,N],[12,"captured",E,E,8,N],[12,"promoted",E,E,8,N],[13,"Drop",R[159],E,8,N],[12,"to",R[160],E,8,N],[12,"piece",E,E,8,N],[11,"to_sfen",R[159],"Converts the move into SFEN formatted string.",8,[[["self"]],[R[76]]]],[11,"new",E,"Creates a new instance of `Position` with an empty board.",9,[[],[R[93]]]],[11,"piece_at",E,"Returns a piece at the given square.",9,[[["square"],["self"]],[R[0]]]],[11,"player_bb",E,"Returns a bitboard containing pieces of the given player.",9,[[["color"],["self"]],[R[150]]]],[11,"hand",E,"Returns the number of the given piece in hand.",9,[[["piece"],["self"]],["u8"]]],[11,"side_to_move",E,"Returns the side to make a move next.",9,[[["self"]],["color"]]],[11,"ply",E,"Returns the number of plies already completed by the…",9,[[["self"]],["u16"]]],[11,"move_history",E,"Returns a history of all moves made since the beginning of…",9,[[["self"]]]],[11,"try_declare_winning",E,"Checks if a player with the given color can declare winning.",9,[[["color"],["self"]],["bool"]]],[11,"in_check",E,"Checks if the king with the given color is in check.",9,[[["color"],["self"]],["bool"]]],[11,"make_move",E,"Makes the given move. Returns `Err` if the move is invalid…",9,[[["self"],["move"]],[[R[6],[R[161]]],[R[161]]]]],[11,"unmake_move",E,"Undoes the last move.",9,[[["self"]],[[R[6],[R[161]]],[R[161]]]]],[11,"move_candidates",E,"Returns a list of squares to where the given pieve at the…",9,[[["piece"],["square"],["self"]],[R[150]]]],[11,"set_sfen",E,"Parses the given SFEN string and updates the game state.",9,[[["str"],["self"]],[[R[6],[R[162]]],[R[162]]]]],[11,"to_sfen",E,"Converts the current state into SFEN formatted string.",9,[[["self"]],[R[76]]]],[0,"square","shogi",E,N,N],[3,"Square",R[163],"Represents a position of each cell in the game board.",N,N],[3,R[187],E,"This struct is created by the [`iter`] method on [`Square`].",N,N],[0,"consts",E,E,N,N],[17,"SQ_1A","shogi::square::consts",E,N,N],[17,"SQ_1B",E,E,N,N],[17,"SQ_1C",E,E,N,N],[17,"SQ_1D",E,E,N,N],[17,"SQ_1E",E,E,N,N],[17,"SQ_1F",E,E,N,N],[17,"SQ_1G",E,E,N,N],[17,"SQ_1H",E,E,N,N],[17,"SQ_1I",E,E,N,N],[17,"SQ_2A",E,E,N,N],[17,"SQ_2B",E,E,N,N],[17,"SQ_2C",E,E,N,N],[17,"SQ_2D",E,E,N,N],[17,"SQ_2E",E,E,N,N],[17,"SQ_2F",E,E,N,N],[17,"SQ_2G",E,E,N,N],[17,"SQ_2H",E,E,N,N],[17,"SQ_2I",E,E,N,N],[17,"SQ_3A",E,E,N,N],[17,"SQ_3B",E,E,N,N],[17,"SQ_3C",E,E,N,N],[17,"SQ_3D",E,E,N,N],[17,"SQ_3E",E,E,N,N],[17,"SQ_3F",E,E,N,N],[17,"SQ_3G",E,E,N,N],[17,"SQ_3H",E,E,N,N],[17,"SQ_3I",E,E,N,N],[17,"SQ_4A",E,E,N,N],[17,"SQ_4B",E,E,N,N],[17,"SQ_4C",E,E,N,N],[17,"SQ_4D",E,E,N,N],[17,"SQ_4E",E,E,N,N],[17,"SQ_4F",E,E,N,N],[17,"SQ_4G",E,E,N,N],[17,"SQ_4H",E,E,N,N],[17,"SQ_4I",E,E,N,N],[17,"SQ_5A",E,E,N,N],[17,"SQ_5B",E,E,N,N],[17,"SQ_5C",E,E,N,N],[17,"SQ_5D",E,E,N,N],[17,"SQ_5E",E,E,N,N],[17,"SQ_5F",E,E,N,N],[17,"SQ_5G",E,E,N,N],[17,"SQ_5H",E,E,N,N],[17,"SQ_5I",E,E,N,N],[17,"SQ_6A",E,E,N,N],[17,"SQ_6B",E,E,N,N],[17,"SQ_6C",E,E,N,N],[17,"SQ_6D",E,E,N,N],[17,"SQ_6E",E,E,N,N],[17,"SQ_6F",E,E,N,N],[17,"SQ_6G",E,E,N,N],[17,"SQ_6H",E,E,N,N],[17,"SQ_6I",E,E,N,N],[17,"SQ_7A",E,E,N,N],[17,"SQ_7B",E,E,N,N],[17,"SQ_7C",E,E,N,N],[17,"SQ_7D",E,E,N,N],[17,"SQ_7E",E,E,N,N],[17,"SQ_7F",E,E,N,N],[17,"SQ_7G",E,E,N,N],[17,"SQ_7H",E,E,N,N],[17,"SQ_7I",E,E,N,N],[17,"SQ_8A",E,E,N,N],[17,"SQ_8B",E,E,N,N],[17,"SQ_8C",E,E,N,N],[17,"SQ_8D",E,E,N,N],[17,"SQ_8E",E,E,N,N],[17,"SQ_8F",E,E,N,N],[17,"SQ_8G",E,E,N,N],[17,"SQ_8H",E,E,N,N],[17,"SQ_8I",E,E,N,N],[17,"SQ_9A",E,E,N,N],[17,"SQ_9B",E,E,N,N],[17,"SQ_9C",E,E,N,N],[17,"SQ_9D",E,E,N,N],[17,"SQ_9E",E,E,N,N],[17,"SQ_9F",E,E,N,N],[17,"SQ_9G",E,E,N,N],[17,"SQ_9H",E,E,N,N],[17,"SQ_9I",E,E,N,N],[11,"new",R[163],"Creates a new instance of `Square`.",10,[[["u8"]],[[R[0],["square"]],["square"]]]],[11,R[154],E,"Creates a new instance of `Square` from SFEN formatted…",10,[[["str"]],[[R[0],["square"]],["square"]]]],[11,"from_index",E,"Creates a new instance of `Square` with the given index…",10,[[["u8"]],[[R[0],["square"]],["square"]]]],[11,"iter",E,R[164],10,[[],["squareiter"]]],[11,"file",E,"Returns a file of the square.",10,[[["self"]],["u8"]]],[11,"rank",E,"Returns a rank of the square.",10,[[["self"]],["u8"]]],[11,"shift",E,"Returns a new `Square` instance by moving the file and the…",10,[[["i8"],["self"]],[[R[0],["square"]],["square"]]]],[11,"relative_rank",E,"Returns a relative rank as if the specified color is black.",10,[[["color"],["self"]],["u8"]]],[11,"in_promotion_zone",E,"Tests if the square is in a promotion zone.",10,[[["color"],["self"]],["bool"]]],[11,"index",E,R[157],10,[[["self"]],["usize"]]],[0,"time","shogi",E,N,N],[4,R[183],R[165],"Represents various time controls.",N,N],[13,"Byoyomi",E,E,11,N],[12,R[166],R[167],E,11,N],[12,R[168],E,E,11,N],[12,"byoyomi",E,E,11,N],[13,"FischerClock",R[165],E,11,N],[12,R[166],R[167],E,11,N],[12,R[168],E,E,11,N],[12,"black_inc",E,E,11,N],[12,"white_inc",E,E,11,N],[11,R[166],R[165],"Returns the current remaining time for the black player.",11,[[["self"]],[R[169]]]],[11,R[168],E,"Returns the current remaining time for the white player.",11,[[["self"]],[R[169]]]],[11,"consume",E,"Updates the current remaining time after consuming the…",11,[[["self"],["color"],[R[169]]],["bool"]]],[11,"into",R[170],E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[5],E,E,1,[[],["i"]]],[11,R[71],E,E,1,[[["self"]],[T]]],[11,R[72],E,E,1,[[["self"],[T]]]],[11,R[75],E,E,1,[[["self"]],[R[76]]]],[11,R[67],E,E,1,[[[U]],[R[6]]]],[11,R[68],E,E,1,[[],[R[6]]]],[11,R[73],E,E,1,[[["self"]],[T]]],[11,R[69],E,E,1,[[["self"]],[T]]],[11,R[70],E,E,1,[[["self"]],[R[74]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[67],E,E,0,[[[U]],[R[6]]]],[11,R[68],E,E,0,[[],[R[6]]]],[11,R[73],E,E,0,[[["self"]],[T]]],[11,R[69],E,E,0,[[["self"]],[T]]],[11,R[70],E,E,0,[[["self"]],[R[74]]]],[11,"into",R[171],E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[5],E,E,12,[[],["i"]]],[11,R[67],E,E,12,[[[U]],[R[6]]]],[11,R[68],E,E,12,[[],[R[6]]]],[11,R[73],E,E,12,[[["self"]],[T]]],[11,R[69],E,E,12,[[["self"]],[T]]],[11,R[70],E,E,12,[[["self"]],[R[74]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[71],E,E,2,[[["self"]],[T]]],[11,R[72],E,E,2,[[["self"],[T]]]],[11,R[75],E,E,2,[[["self"]],[R[76]]]],[11,R[67],E,E,2,[[[U]],[R[6]]]],[11,R[68],E,E,2,[[],[R[6]]]],[11,R[73],E,E,2,[[["self"]],[T]]],[11,R[69],E,E,2,[[["self"]],[T]]],[11,R[70],E,E,2,[[["self"]],[R[74]]]],[11,"into",R[172],E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[75],E,E,13,[[["self"]],[R[76]]]],[11,R[67],E,E,13,[[[U]],[R[6]]]],[11,R[68],E,E,13,[[],[R[6]]]],[11,R[73],E,E,13,[[["self"]],[T]]],[11,R[69],E,E,13,[[["self"]],[T]]],[11,R[70],E,E,13,[[["self"]],[R[74]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[75],E,E,3,[[["self"]],[R[76]]]],[11,R[67],E,E,3,[[[U]],[R[6]]]],[11,R[68],E,E,3,[[],[R[6]]]],[11,R[73],E,E,3,[[["self"]],[T]]],[11,R[69],E,E,3,[[["self"]],[T]]],[11,R[70],E,E,3,[[["self"]],[R[74]]]],[11,"into",R[173],E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[67],E,E,4,[[[U]],[R[6]]]],[11,R[68],E,E,4,[[],[R[6]]]],[11,R[73],E,E,4,[[["self"]],[T]]],[11,R[69],E,E,4,[[["self"]],[T]]],[11,R[70],E,E,4,[[["self"]],[R[74]]]],[11,"into",R[151],E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[71],E,E,5,[[["self"]],[T]]],[11,R[72],E,E,5,[[["self"],[T]]]],[11,R[75],E,E,5,[[["self"]],[R[76]]]],[11,R[67],E,E,5,[[[U]],[R[6]]]],[11,R[68],E,E,5,[[],[R[6]]]],[11,R[73],E,E,5,[[["self"]],[T]]],[11,R[69],E,E,5,[[["self"]],[T]]],[11,R[70],E,E,5,[[["self"]],[R[74]]]],[11,"into",R[174],E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[71],E,E,6,[[["self"]],[T]]],[11,R[72],E,E,6,[[["self"],[T]]]],[11,R[75],E,E,6,[[["self"]],[R[76]]]],[11,R[67],E,E,6,[[[U]],[R[6]]]],[11,R[68],E,E,6,[[],[R[6]]]],[11,R[73],E,E,6,[[["self"]],[T]]],[11,R[69],E,E,6,[[["self"]],[T]]],[11,R[70],E,E,6,[[["self"]],[R[74]]]],[11,"into",R[175],E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[5],E,E,14,[[],["i"]]],[11,R[67],E,E,14,[[[U]],[R[6]]]],[11,R[68],E,E,14,[[],[R[6]]]],[11,R[73],E,E,14,[[["self"]],[T]]],[11,R[69],E,E,14,[[["self"]],[T]]],[11,R[70],E,E,14,[[["self"]],[R[74]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[71],E,E,7,[[["self"]],[T]]],[11,R[72],E,E,7,[[["self"],[T]]]],[11,R[75],E,E,7,[[["self"]],[R[76]]]],[11,R[67],E,E,7,[[[U]],[R[6]]]],[11,R[68],E,E,7,[[],[R[6]]]],[11,R[73],E,E,7,[[["self"]],[T]]],[11,R[69],E,E,7,[[["self"]],[T]]],[11,R[70],E,E,7,[[["self"]],[R[74]]]],[11,"into",R[159],E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[75],E,E,9,[[["self"]],[R[76]]]],[11,R[67],E,E,9,[[[U]],[R[6]]]],[11,R[68],E,E,9,[[],[R[6]]]],[11,R[73],E,E,9,[[["self"]],[T]]],[11,R[69],E,E,9,[[["self"]],[T]]],[11,R[70],E,E,9,[[["self"]],[R[74]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[67],E,E,8,[[[U]],[R[6]]]],[11,R[68],E,E,8,[[],[R[6]]]],[11,R[73],E,E,8,[[["self"]],[T]]],[11,R[69],E,E,8,[[["self"]],[T]]],[11,R[70],E,E,8,[[["self"]],[R[74]]]],[11,"into",R[163],E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[71],E,E,10,[[["self"]],[T]]],[11,R[72],E,E,10,[[["self"],[T]]]],[11,R[75],E,E,10,[[["self"]],[R[76]]]],[11,R[67],E,E,10,[[[U]],[R[6]]]],[11,R[68],E,E,10,[[],[R[6]]]],[11,R[73],E,E,10,[[["self"]],[T]]],[11,R[69],E,E,10,[[["self"]],[T]]],[11,R[70],E,E,10,[[["self"]],[R[74]]]],[11,"into",E,E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[5],E,E,15,[[],["i"]]],[11,R[67],E,E,15,[[[U]],[R[6]]]],[11,R[68],E,E,15,[[],[R[6]]]],[11,R[73],E,E,15,[[["self"]],[T]]],[11,R[69],E,E,15,[[["self"]],[T]]],[11,R[70],E,E,15,[[["self"]],[R[74]]]],[11,"into",R[165],E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[71],E,E,11,[[["self"]],[T]]],[11,R[72],E,E,11,[[["self"],[T]]]],[11,R[67],E,E,11,[[[U]],[R[6]]]],[11,R[68],E,E,11,[[],[R[6]]]],[11,R[73],E,E,11,[[["self"]],[T]]],[11,R[69],E,E,11,[[["self"]],[T]]],[11,R[70],E,E,11,[[["self"]],[R[74]]]],[11,"from",R[172],E,13,[[["parseinterror"]],[R[162]]]],[11,"from",E,E,13,[[["error"]],[R[162]]]],[11,"next",R[170],E,1,[[["self"]],[R[0]]]],[11,"next",R[171],E,12,[[["self"]],[R[0]]]],[11,"next",R[175],E,14,[[["self"]],[R[0]]]],[11,"next",R[163],E,15,[[["self"]],[R[0]]]],[11,"clone",R[170],E,1,[[["self"]],[R[150]]]],[11,"clone",R[171],E,2,[[["self"]],["color"]]],[11,"clone",R[151],E,5,[[["self"]],["move"]]],[11,"clone",R[174],E,6,[[["self"]],["piece"]]],[11,"clone",R[175],E,7,[[["self"]],[R[155]]]],[11,"clone",R[163],E,10,[[["self"]],["square"]]],[11,"clone",R[165],E,11,[[["self"]],["timecontrol"]]],[11,"default",R[170],E,1,[[],[R[150]]]],[11,"default",R[173],E,4,[[],["hand"]]],[11,"default",R[159],E,9,[[],[R[93]]]],[11,"eq",R[171],E,2,[[["color"],["self"]],["bool"]]],[11,"eq",R[172],E,13,[[[R[162]],["self"]],["bool"]]],[11,"eq",E,E,3,[[[R[161]],["self"]],["bool"]]],[11,"eq",R[151],E,5,[[["self"],["move"]],["bool"]]],[11,"ne",E,E,5,[[["self"],["move"]],["bool"]]],[11,"eq",R[174],E,6,[[["piece"],["self"]],["bool"]]],[11,"ne",E,E,6,[[["piece"],["self"]],["bool"]]],[11,"eq",R[175],E,7,[[["self"],[R[155]]],["bool"]]],[11,"eq",R[159],E,8,[[["self"],["move"]],["bool"]]],[11,"eq",R[163],E,10,[[["square"],["self"]],["bool"]]],[11,"ne",E,E,10,[[["square"],["self"]],["bool"]]],[11,"fmt",R[170],E,1,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[171],E,2,[[["self"],[R[7]]],[[R[6],["error"]],["error"]]]],[11,"fmt",R[172],E,13,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,3,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[151],E,5,[[["self"],[R[7]]],[[R[6],["error"]],["error"]]]],[11,"fmt",R[174],E,6,[[["self"],[R[7]]],[[R[6],["error"]],["error"]]]],[11,"fmt",R[175],E,7,[[["self"],[R[7]]],[[R[6],["error"]],["error"]]]],[11,"fmt",R[159],E,9,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[163],E,10,[[["self"],[R[7]]],[[R[6],["error"]],["error"]]]],[11,"fmt",R[170],E,1,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[171],E,2,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[172],E,13,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,3,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[173],E,4,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[151],E,5,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[174],E,6,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[175],E,7,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[159],E,8,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,9,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[163],E,10,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[165],E,11,[[["self"],[R[7]]],[R[6]]]],[11,R[176],R[170],E,1,[[["self"],[R[150]]]]],[11,R[176],E,E,1,[[["self"],["square"]]]],[11,R[177],E,E,1,[[["self"],[R[150]]]]],[11,R[177],E,E,1,[[["self"],["square"]]]],[11,R[178],E,E,1,[[["self"],[R[150]]]]],[11,R[178],E,E,1,[[["self"],["square"]]]],[11,"hash",R[163],E,10,[[["self"],["__h"]]]],[11,R[179],R[172],E,13,[[["self"]],["str"]]],[11,"cause",E,E,13,[[["self"]],[[R[0],["error"]],["error"]]]],[11,R[179],E,E,3,[[["self"]],["str"]]],[11,"cause",E,E,3,[[["self"]],[[R[0],["error"]],["error"]]]]],"p":[[3,"Factory"],[3,"Bitboard"],[4,"Color"],[4,R[180]],[3,"Hand"],[4,"Move"],[3,"Piece"],[4,R[181]],[4,R[182]],[3,R[158]],[3,"Square"],[4,R[183]],[3,R[184]],[3,R[185]],[3,R[186]],[3,R[187]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);